import {
  FunctionCov,
  ProcessCov,
  RangeCov,
  ScriptCov,
} from "./types";

type ReadonlyFunctionCov = {
  readonly functionName: FunctionCov["functionName"];
  readonly ranges: ReadonlyRangeCov[];
  readonly isBlockCoverage: FunctionCov["isBlockCoverage"];
};

type ReadonlyRangeCov = {
  readonly startOffset: RangeCov["startOffset"];
  readonly endOffset: RangeCov["endOffset"];
  readonly count: RangeCov["count"];
};

type ReadonlyScriptCov = {
  readonly scriptId: ScriptCov["scriptId"];
  readonly url: ScriptCov["url"];
  readonly functions: ReadonlyFunctionCov[];
};

type ReadonlyProcessCov = {
  readonly result: ReadonlyScriptCov[];
};

/**
 * Creates a deep copy of a process coverage.
 *
 * @param processCov Process coverage to clone.
 * @return Cloned process coverage.
 */
export function cloneProcessCov(processCov: Readonly<ProcessCov>): ProcessCov {
  const result = processCov.result.map((scriptCov) => cloneScriptCov(scriptCov));

  return {
    result,
  };
}

/**
 * Creates a deep copy of a script coverage.
 *
 * @param scriptCov Script coverage to clone.
 * @return Cloned script coverage.
 */
export function cloneScriptCov(scriptCov: Readonly<ScriptCov>): ScriptCov {
  const functions = scriptCov.functions.map((functionCov) => cloneFunctionCov(functionCov));

  return {
    ...scriptCov,
    functions,
  };
}

/**
 * Creates a deep copy of a function coverage.
 *
 * @param functionCov Function coverage to clone.
 * @return Cloned function coverage.
 */
export function cloneFunctionCov(functionCov: Readonly<FunctionCov>): FunctionCov {
  const ranges = functionCov.ranges.map((rangeCov) => cloneRangeCov(rangeCov));

  return {
    ...functionCov,
    ranges,
  };
}

/**
 * Creates a deep copy of a range coverage.
 *
 * @param rangeCov Range coverage to clone
