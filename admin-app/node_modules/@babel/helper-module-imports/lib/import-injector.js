"use strict";

import { NodePath } from "@babel/core";
import * as t from "@babel/types";
import ImportBuilder from "./import-builder";
import isModule from "./is-module";

const enum ImportPosition {
  Before = "before",
  After = "after",
}

const enum ImportingInterop {
  Node = "node",
  Babel = "babel",
}

const enum ImportedInterop {
  Babel = "babel",
  Compiled = "compiled",
  Uncompiled = "uncompiled",
}

const enum EnsureLiveReference {
  Yes = true,
  No = false,
}

const enum EnsureNoContext {
  Yes = true,
  No = false,
}

const enum BlockHoist {
  None = 0,
  Shallow = 1,
  Deep = 2,
  VeryDeep = 3,
}

class ImportInjector {
  private readonly _defaultOpts: {
    importedSource: string | null;
    importedType: "commonjs" | "es6";
    importedInterop: ImportedInterop;
    importingInterop: ImportingInterop;
    ensureLiveReference: EnsureLiveReference;
    ensureNoContext: EnsureNoContext;
    importPosition: ImportPosition;
    blockHoist: BlockHoist;
    nameHint?: string;
  };

  private readonly _programPath: NodePath<t.Program>;
  private readonly _programScope: t.Scope;
  private readonly _hub: any;

  constructor(
    private readonly path: NodePath<t.Node>,
    importedSource: string | { importedSource: string; opts?: any },
    opts?: {
      importedType?: "commonjs" | "es6";
      importedInterop?: ImportedInterop;
      importingInterop?: ImportingInterop;
      ensureLiveReference?: EnsureLiveReference;
      ensureNoContext?: EnsureNoContext;
      importPosition?: ImportPosition;
      blockHoist?: BlockHoist;
      nameHint?: string;
    }
  ) {
    this._defaultOpts = {
      importedSource: null,
      importedType: "commonjs",
      importedInterop: "babel",
      importingInterop: "babel",
      ensureLiveReference: false,
      ensureNoContext: false,
      importPosition: "before",
      blockHoist: 3,
      ...this._applyDefaults(importedSource, opts, true),
    };

    const programPath = path.find((p) => p.isProgram());
    if (!programPath) {
      throw new Error("Expected a Program node.");
    }
    this._programPath = programPath;
    this._programScope = programPath.scope;
    this._hub = programPath.hub;
  }

  private _applyDefaults(
    importedSource: string | { importedSource: string; opts?: any },
    opts?: any,
    isInit = false
  ): any {
    let newOpts;
    if (typeof importedSource === "string") {
      newOpts = Object.assign({}, this._defaultOpts, {
        importedSource,
      }, opts);
    } else {
      _assert(
        !opts,
        "Unexpected secondary arguments. Use 'importedSource' as the first argument instead."
      );
      newOpts = Object.assign({}, this._defaultOpts, importedSource);
    }
    if (!isInit && opts) {
      if (opts.nameHint !== undefined)
        newOpts.nameHint = opts.nameHint;
      if (opts.blockHoist !== undefined)
        newOpts.blockHoist = opts.blockHoist;
    }
    return newOpts;
  }

  addDefault(importedSourceIn: string, opts?: any): t.Node {
    return this.addNamed("default", importedSourceIn, opts);
  }

  addNamed(importName: string, importedSourceIn: string, opts?: any): t.Node {
    _assert(
      typeof importName === "string",
      "Expected a string as the first argument of 'addNamed'."
    );
    return this._generateImport(
      this._applyDefaults(importedSourceIn, opts),
      importName
    );
  }

  addNamespace(importedSourceIn: string, opts?: any): t.Node {
    return this._generateImport(
      this._applyDefaults(importedSourceIn, opts),
      null
    );
  }

  addSideEffect(importedSourceIn: string, opts?: any): t.Node {
    return this._generateImport(
      this._applyDefaults(importedSourceIn, opts),
      undefined
    );
  }

  _generateImport(opts: any, importName?: string): t.Node {
    const isDefault = importName === "default";
    const isNamed = !!importName && !isDefault;
    const isNamespace = importName === null;
    const {
      importedSource,
      importedType,
      importedInterop,
      importingInterop,
      ensureLiveReference,
      ensureNoContext,
      nameHint,
      importPosition,
      blockHoist,
    } = opts;
    let name = nameHint || importName;
    const isMod = isModule(this._programPath);
    const isModuleForNode = isMod && import
