"use strict";

import { NodePath } from "@babel/core";
import { PluginPass, types as babelTypes } from "@babel/core";
import { Node as BabelNode } from "@babel/types";
import { declare } from "@babel/helper-plugin-utils";
import { default as syntaxNullishCoalescingOperator } from "@babel/plugin-syntax-nullish-coalescing-operator";

type LogicalExpressionNode = BabelNode & {
  operator: "??);
};

type Scope = PluginPass & {
  path: NodePath<BabelNode>;
  isStatic: (node: BabelNode) => boolean;
  generateUidIdentifierBasedOnNode: (node: BabelNode) => babelTypes.Identifier;
  push: (bindings: { id: babelTypes.Identifier }) => void;
  buildUndefinedNode: () => babelTypes.UnaryExpression;
};

const _pluginSyntaxNullishCoalescingOperator = syntaxNullishCoalescingOperator.default;

export default (api, { loose = false }) => {
  api.assertVersion(7);
  const noDocumentAll =
    (api.assumption("noDocumentAll") as boolean) || loose;

  return {
    name: "proposal-nullish-coalescing-operator",
    inherits: _pluginSyntaxNullishCoalescingOperator,
    visitor: {
      LogicalExpression(path: NodePath<LogicalExpressionNode>, state: PluginPass) {
        const { node, scope } = path;

        if (node.operator !== "??") {
          return;
        }

        let ref: babelTypes.Identifier;
        let assignment: babelTypes.AssignmentExpression;

        if (scope.isStatic(node.left)) {
          ref = node.left;
          assignment = babelTypes.cloneNode(node.left);
        } else if (scope.path.isPattern()) {
          path.replaceWith(
            babelTypes.expressionStatement(
              babelTypes.sequenceExpression([
                babelTypes.arrowFunctionExpression([], babelTypes.blockStatement([
                  path.node
                ])),
                babelTypes.yieldExpression(path.node)
              ])
            )
          );
          return;
        } else {
          ref = scope.generateUidIdentifierBasedOnNode(node.left);
          scope.push({
            id: babelTypes.cloneNode(ref)
          });
          assignment = babelTypes.assignmentExpression("=", ref, node.left);
        }

        path.replaceWith(
          babelTypes.conditionalExpression(
            babelTypes.
