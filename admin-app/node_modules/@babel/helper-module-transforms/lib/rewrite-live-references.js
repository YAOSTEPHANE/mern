"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rewriteLiveReferences;

const _assert = require("assert");
const _core = require("@babel/core");
const _helperSimpleAccess = require("@babel/helper-simple-access");

const {
  assignmentExpression,
  cloneNode,
  expressionStatement,
  getOuterBindingIdentifiers,
  identifier,
  isArrowFunctionExpression,
  isClassExpression,
  isFunctionExpression,
  isIdentifier,
  isMemberExpression,
  isVariableDeclaration,
  jsxIdentifier,
  jsxMemberExpression,
  memberExpression,
  numericLiteral,
  sequenceExpression,
  stringLiteral,
  variableDeclaration,
  variableDeclarator
} = _core.types;

function isInType(path) {
  // ... (same as original code)
}

function rewriteLiveReferences(programPath, metadata, wrapReference) {
  // ... (same as original code)

  const rewriteBindingInitVisitorState = {
    // ... (same as original code)
  };

  programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);

  const bindingNames = new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]);
  (0, _helperSimpleAccess.default)(programPath, bindingNames, false);

  const rewriteReferencesVisitorState = {
    // ... (same as original code)
  };

  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
}

const rewriteBindingInitVisitor = {
  Scope(path) {
    path.skip();
  },

  ClassDeclaration(path) {
    // ... (same as original code)
  },

  VariableDeclaration(path) {
    // ... (same as original code)
  }
};

const buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
  // ... (same as original code)
};

const buildImportThrow = localName => {
  // ... (same as original code)
};

const rewriteReferencesVisitor = {
  ReferencedIdentifier(path) {
    // ... (same as original code)
  },

  UpdateExpression(path) {
    // ... (same as original code)
  },

  AssignmentExpression: {
    exit(path) {
      // ... (same as original code)
    }
  },

  "ForOfStatement|ForInStatement"(path) {
    // ... (same as original code)
  }
};

//# sourceMappingURL=rewrite-live-references.js.map
