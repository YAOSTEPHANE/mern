"use strict";

import type { Node } from "@babel/core";
import { isSideEffectImport, normalizeAndLoadMetadata } from "./normalize-and-load-metadata.js";

/**
 * Returns a function that determines the payload for a get wrapper.
 * @param {boolean | string[] | ((source: string) => boolean)} [lazy=false] - A flag or function indicating whether to use a lazy payload.
 * @returns {(source: string, metadata: Node) => string | null} - A function that returns a lazy payload or null.
 */
export function toGetWrapperPayload(lazy = false) {
  return (source, metadata) => {
    if (typeof lazy === "function") {
      return lazy(source) ? "lazy" : null;
    }

    if (lazy === true || (Array.isArray(lazy) && lazy.indexOf(source) !== -1)) {
      return /\./.test(source) ? null : "lazy";
    }

    if (lazy === false || (Array.isArray(lazy) && lazy.indexOf(source) === -1)) {
      if (isSideEffectImport(metadata) || metadata.reexportAll) {
        return null;
      }
    }

    throw new Error(".lazy must be a boolean, string array, or function");
  };
}

/**
 * Wraps a reference node with a call expression if the payload is "lazy".
 * @param {Node} ref - The reference node to wrap.
 * @param {string} payload - The payload for the get wrapper.
 * @returns {Node | null} - The wrapped
