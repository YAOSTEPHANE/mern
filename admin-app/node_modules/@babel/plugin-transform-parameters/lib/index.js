"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "convertFunctionParams", {
  enumerable: true,
  get: function () {
    return _params.default;
  }
});
exports.default = void 0;
const { declare } = require("@babel/helper-plugin-utils");
const params = require("./params");
const rest = require("./rest");
const { assertVersion } = require("@babel/helper-plugin-utils");

const defaultOptions = {
  loose: false,
  noNewArrows: true
};

const convertFunctionParamsPlugin = (api, options) => {
  options = { ...defaultOptions, ...options };
  api.assertVersion(7);
  const { loose: ignoreFunctionLength, noNewArrows } = api.assumption({
    ignoreFunctionLength: options.loose,
    noNewArrows: true
  });

  return {
    name: "transform-parameters",
    visitor: {
      Function(path) {
        const convertedRest = rest.default(path);
        const convertedParams = params.default(path, ignoreFunctionLength);

        if (path.isArrowFunctionExpression() && path.get("params").some(param => param.isRestElement() || param.isAssignmentPattern())) {
          path.arrowFunctionToExpression({
            allowInsertArrowWithRest: false,
            noNewArrows
          });
          if (!path.isFunctionExpression()) return;
        }

        if (convertedRest || convertedParams) {
          path.scope.crawl();
        }
      }
    }
  };
};

const _default = exports.default = declare(convertFunctionParamsPlugin);
