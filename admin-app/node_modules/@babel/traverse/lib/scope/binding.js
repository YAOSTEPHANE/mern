"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Represents a binding between an identifier and a value in a given scope.
 */
class Binding {
  /**
   * @param {Object} options - The options for creating a new binding.
   * @param {string} options.identifier - The identifier of the binding.
   * @param {Object} options.scope - The scope of the binding.
   * @param {Object} options.path - The path of the binding.
   * @param {string} options.kind - The kind of the binding. Defaults to ''.
   */
  constructor({
    identifier,
    scope,
    path,
    kind = ''
  }) {
    this.constantViolations = [];
    this.constant = true;
    this.referencePaths = [];
    this.referenced = false;
    this.references = 0;
    this.identifier = identifier;
    this.scope = scope;
    this.path = path;
    this.kind = kind;
    if ((kind === "var" || kind === "hoisted") && isDeclaredInLoop(path)) {
      this.reassign(path);
    }
    this.clearValue();
  }

  /**
   * Sets the value of the binding to `null`.
   */
  clearValue() {
    this.hasDeoptedValue = false;
    this.hasValue = false;
    this.value = null;
  }

  /**
   * Sets the value of the binding to `value`.
   * @param {any} value - The value to set.
   */
  setValue(value) {
    if (this.hasDeoptedValue) return;
    this.hasValue = true;
    this.value = value;
  }

  /**
   * Sets the value of the binding to `undefined` and sets `hasDeoptedValue` to `true`.
   */
  deoptValue() {
    this.clearValue();
    this.hasDeoptedValue = true;
  }

  /**
