"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const {
  default: helperPluginUtils
} = require("@babel/helper-plugin-utils");
const {
  default: remapAsyncToGenerator
} = require("@babel/helper-remap-async-to-generator");
const {
  default: addNamed
} = require("@babel/helper-module-imports");
const {
  default: transformFromAst
} = require("@babel/core");

const defaultMethodWrapper = `
  require("@babel/runtime/helpers/asyncToGenerator").default
`;

const defaultModuleWrapper = "babel-runtime/helpers/asyncToGenerator";

const defaultOptions = {
  method: defaultMethodWrapper,
  module: defaultModuleWrapper,
  noNewArrows: true,
  ignoreFunctionLength: false
};

const transformAsyncToGenerator = (api, options = {}) => {
  const {
    method,
    module,
    noNewArrows,
    ignoreFunctionLength
  } = { ...defaultOptions,
    ...options
  };

  api.assertVersion(7);

  const methodWrapper = method || defaultMethodWrapper;
  const moduleWrapper = module || defaultModuleWrapper;

  return {
    name: "transform-async-to-generator",
    visitor: {
      Function(path, state) {
        if (!path.node.async || path.node.generator) return;

        const wrapAsync = state.methodWrapper || addNamed(path, methodWrapper, moduleWrapper);

        remapAsyncToGenerator(path, {
          wrapAsync
        }, noNewArrows, ignoreFunctionLength);
      }
    }
  };
};

const code = `
  async function foo() {
    return 1;
  }
`;

const result = transformFromAst(code, null, {
  plugins: [transformAsyncToGenerator]
});

console.log(result.code);
