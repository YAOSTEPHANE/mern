"use strict";

import generate from "@babel/generator";
import { types as _core, template as _template } from "@babel/core";
import { declare } from "@babel/helper-plugin-utils";
import { defineProperty } from "@babel/helper-property-definition";
import { assign } from "@babel/helper-binary-assignment-operator";

const DefineAccessorHelper = _template.expression.ast`
  function (type, obj, key, fn) {
    const desc = { configurable: true, enumerable: true };
    desc[type] = fn;
    return Object.defineProperty(obj, key, desc);
  }
`;
DefineAccessorHelper._compact = true;

const _default = declare((api, options) => {
  api.assertVersion(7);
  const setComputedProperties = api.assumption("setComputedProperties") || options.loose;
  const pushComputedProps = setComputedProperties ? pushComputedPropsLoose : pushComputedPropsSpec;

  function buildDefineAccessor(state, obj, prop) {
    const type = prop.kind;
    const key = !prop.computed && _core.isIdentifier(prop.key) ? _core.stringLiteral(prop.key.name) : prop.key;
    const fn = getValue(prop);

    let helper;
    if (state.hasOwnProperty("defineAccessor")) {
      helper = state.get("defineAccessor");
    } else {
      const file = state.file;
      helper = file.get("fallbackDefineAccessorHelper");
      if (!helper) {
        const id = file.scope.generateUidIdentifier("defineAccessor");
        file.scope.push({
          id,
          init: DefineAccessorHelper
        });
        file.set("fallbackDefineAccessorHelper", helper = id);
      }
      helper = _core.cloneNode(helper);
    }

    return _core.callExpression(helper, [_core.stringLiteral(type), obj, key, fn]);
  }

  function getValue(prop) {
    if (_core.isObjectProperty(prop)) {
      return prop.value;
    } else if (_core.isObjectMethod(prop)) {
      return _core.functionExpression(null, prop.params, prop.body, prop.generator, prop.async);
    }
  }

  function pushAssign(objId, prop, body) {
    body.push(assign(objId, prop.key, prop.computed || _core.isLiteral(prop.key), getValue(prop)));
  }

  function pushComputedPropsLoose(info) {
    const { computedProps, state, initPropExpression, objId, body } = info;

    for (const prop of computedProps) {
      if (_core.isObjectMethod(prop) && (prop.kind === "get" || prop.kind === "set")) {
        if (computedProps.length === 1) {
          return buildDefineAccessor(state, initPropExpression, prop);
        } else {
          body.push(buildDefineAccessor(state, objId, prop));
        }
      } else {
        pushAssign(objId, prop, body);
      }
    }
  }

  function pushComputedPropsSpec(info) {
    const { objId, body, computedProps, state } = info;
    const CHUNK_LENGTH_CAP = 10;
    let currentChunk = null;
    const computedPropsChunks = [];

    for (const prop of computedProps) {
      if (!currentChunk || currentChunk.length === CHUNK_LENGTH_CAP) {
        currentChunk = [];
        computedPropsChunks.push(currentChunk);
      }
      currentChunk.push(prop);
    }

    for (const chunk of computedPropsChunks) {
      const single = computedPropsChunks.length === 1;
      let node = single ? info.initPropExpression : _core.cloneNode(objId);

      for (const prop of chunk) {
        if (_core.isObjectMethod(prop) && (prop.kind === "get" || prop.kind === "set")) {
          node = buildDefineAccessor(info.state, node, prop);
        } else {
          node = defineProperty(node, _core.toComputedKey(prop), getValue(prop));
        }
      }

      if (single) return node;
      body.push(node);
    }
  }

  return {
    name: "transform-computed-properties",
    visitor: {
      ObjectExpression: {
        exit(path, state) {
          const { node, parent, scope } = path;
          let hasComputed = false;

          for (const prop of node.properties) {
            hasComputed = prop.computed === true;
            if (hasComputed) break;
          }

          if (!hasComputed) return;

          const initProps = [];
          const computedProps = [];
          let foundComputed = false;

          for (const prop of node.properties) {
            if (_core.isSpreadElement(prop)) {
              continue;
            }
            if (prop.computed) {
              foundComputed = true;
            }
            if (foundComputed) {
              computedProps.push(prop);
            } else {
              initProps.push(prop);
            }
          }

          const objId = scope
