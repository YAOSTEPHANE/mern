"use strict";

import {
  isIdentifier,
  isTSAnyKeyword,
  isTSBaseType,
  isTSUnionType,
  isTSTypeReference,
} from "../../validators/generated/index.js";

export function getQualifiedName(node: any): string {
  if (isIdentifier(node)) {
    return node.name;
  }
  if (isTSTypeReference(node)) {
    const { typeName, typeParameters } = node;
    if (typeParameters) {
      const name = getQualifiedName(typeName);
      return `${name}<${typeParameters.params.join(",")}>`;
    }
    return getQualifiedName(typeName);
  }
  throw new Error(`Invalid node type: ${node.type}`);
}

export function removeTypeDuplicates(nodesIn: any[]): any[] {
  const nodes = Array.from(new Set(nodesIn));
  const generics = new Map<string, any>();
  const bases = new Map<any, any>();
  const typeGroups = new Set<any>();
  const types: any[] = [];

  for (const node of nodes) {
    if (!node) continue;

    if (types.indexOf(node) >= 0) {
      continue;
    }

    if (isTSAnyKeyword(node)) {
      return [node];
    }

    if (isTSBaseType(node)) {
      bases.set(node.type, node);
      continue;
    }

    if (isTSUnionType(node)) {
      if (!typeGroups.has(node.types)) {
        nodes.push(...node.types);
        typeGroups.add(node.types);
      }
      continue;
    }

    if (isTSTypeReference(node) && node.typeParameters) {
      const name = getQualifiedName(node.typeName);
      if (generics.has(name)) {
        const existing = generics.get(name);
        if (existing.typeParameters) {
          existing.typeParameters.params.push(...node.typeParameters.params);
          existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params);
        } else {
          existing.typeParameters = node.typeParameters;
        }
      } else {
        generics.set(name, node);
      }
      continue;
    }

    types.push(node);
  }

  for (const [, baseType] of bases) {
    types.push(baseType);
  }

  for (const [, genericName] of generics) {
    types.push(genericName);
  }

  return types;
}

//# sourceMappingURL=removeTypeDuplicates
