"use strict";

// Add type annotations for TypeScript compatibility
type DeprecationWarningOptions = {
  prefix?: string;
};

type CaptureShortStackTraceOptions = {
  skip?: number;
  length?: number;
};

// Add JSDoc comments for better documentation
/**
 * Warns the user that a function or method has been deprecated.
 * @param oldName - The name of the deprecated function or method.
 * @param newName - The name of the new function or method to use instead.
 * @param options - Additional options for the warning message.
 */
function deprecationWarning(oldName: string, newName: string, options: DeprecationWarningOptions = {}): void {
  const prefix = options.prefix || "";
  if (warnings.has(oldName)) return;
  warnings.add(oldName);
  const { internal, trace } = captureShortStackTrace(1, 2);
  if (internal) {
    return;
  }
  console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`\n${trace}`);
}

/**
 * Captures a short stack trace from an error object.
 * @param skip - The number of stack frames to skip.
 * @param length - The maximum number of stack frames to include.
 * @returns An object with the internal flag and the stack trace.
 */
function captureShortStackTrace(skip: number = 1, length: number = 10): { internal: boolean; trace: string } {
  const { stackTraceLimit, prepareStackTrace } = Error;
  let stackTrace: any[];
  Error
