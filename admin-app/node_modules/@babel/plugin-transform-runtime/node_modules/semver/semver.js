const debug = require('debug')('semver');

const { src, t } = exports;
const {
  MAX_LENGTH,
  MAX_SAFE_INTEGER,
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  LETTERDASHNUMBER,
  safeRegexReplacements,
  makeSafeRe,
} = getSafeRegex();

// Regular Expressions for tokenizing, validating, and parsing SemVer version strings.
src.NUMERICIDENTIFIER = '0|[1-9]\\d*';
src.NUMERICIDENTIFIERLOOSE = '\\d+';
src.NONNUMERICIDENTIFIER = `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`;
src.MAINVERSION = `(${src.NUMERICIDENTIFIER})\\.(${src.NUMERICIDENTIFIER})\\.(${src.NUMERICIDENTIFIER})`;
src.MAINVERSIONLOOSE = `(${src.NUMERICIDENTIFIERLOOSE})\\.(${src.NUMERICIDENTIFIERLOOSE})\\.(${src.NUMERICIDENTIFIERLOOSE})`;
src.PRERELEASEIDENTIFIER = `(?:${src.NUMERICIDENTIFIER}|${src.NONNUMERICIDENTIFIER})`;
src.PRERELEASEIDENTIFIERLOOSE = `(?:${src.NUMERICIDENTIFIERLOOSE}|${src.NONNUMERICIDENTIFIER})`;
src.PRERELEASE = `(?:-(${src.PRERELEASEIDENTIFIER})(?:\\.${src.PRERELEASEIDENTIFIER})*)`;
src.PRERELEASELOOSE = `(?:-?(${src.PRERELEASEIDENTIFIERLOOSE})(?:\\.${src.PRERELEASEIDENTIFIERLOOSE})*)`;
src.BUILDIDENTIFIER = `${LETTERDASHNUMBER}+`;
src.BUILD = `(?:\\+(${src.BUILDIDENTIFIER})(?:\\.${src.BUILDIDENTIFIER})*)`;
src.FULLPLAIN = `v?${src.MAINVERSION}${src.PRERELEASE}?${src.BUILD}?`;
src.FULL = `^${src.FULLPLAIN}$`;
src.LOOSEPLAIN = `[v=\\s]*${src.MAINVERSIONLOOSE}${src.PRERELEASELOOSE}?${src.BUILD}?`;
src.LOOSE = `^${src.LOOSEPLAIN}$`;
src.GTLT = `((?:<|>)?=?)`;
src.XRANGEIDENTIFIERLOOSE = src.NUMERICIDENTIFIERLOOSE + '|x|X|\\*';
src.XRANGEIDENTIFIER = src.NUMERICIDENTIFIER + '|x|X|\\*';
src.XRANGEPLAIN = `[v=\\s]*(${src.XRANGEIDENTIFIER})(?:\\.(${src.XRANGEIDENTIFIER}))?(?:\\.(${src.XRANGEIDENTIFIER}))?(?:${src.PRERELEASE})?${src.BUILD}?`;
src.XRANGEPLAINLOOSE = `[v=\\s]*(${src.XRANGEIDENTIFIERLOOSE})(?:\\.(${src.XRANGEIDENTIFIERLOOSE}))?(?:\\.(${src.XRANGEIDENTIFIERLOOSE}))?(?:${src.PRERELEASELOOSE})?${src.BUILD}?`;
src.XRANGE = `^${src.GTLT}\\s*${src.XRANGEPLAIN}$`;
src.XRANGELOOSE = `^${src.GTLT}\\s*${src.XRANGEPLAINLOOSE}$`;

// Coercion.
src.COERCE = `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`;
const coerceRegex = new RegExp(src.COERCE, 'g');
const safeCoerceRegex = new RegExp(makeSafeRe(src.COERCE), 'g');

// ... rest of the code

function getSafeRegex() {
  const safeRegexReplacements = [
    ['\\s', 1],
    ['\\d', MAX_LENGTH],
    [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
  ];

  function makeSafeRe(value) {
    return safeRegexReplacements.reduce((safeRe, [token, max]) => {
      return safeRe.split(token + '*').join(token + '{0,' + max + '}')
                   .split(token + '+').join(token + '{1,' + max + '}');
    }, value);
  }

  // ... rest of the safe regex functions
}
