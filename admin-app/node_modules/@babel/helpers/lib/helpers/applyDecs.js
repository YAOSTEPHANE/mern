"use strict";

exports.__esModule = true;
exports.applyDecs = applyDecs;

function getMetadata(metadataMap, key) {
  assertNotFinished(decoratorFinishedRef, "getMetadata");
  assertMetadataKey(key);
  const metadataForKey = metadataMap[key];
  if (metadataForKey == null) return undefined;
  if (kind === 1) {
    const pub = metadataForKey.public;
    if (pub !== undefined) {
      return pub[property];
    }
  } else if (kind === 2) {
    const priv = metadataForKey.private;
    if (priv !== undefined) {
      return priv.get(property);
    }
  } else if (Object.prototype.hasOwnProperty.call(metadataForKey, "constructor")) {
    return metadataForKey.constructor;
  }
}

function setMetadata(metadataMap, key, value) {
  assertNotFinished(decoratorFinishedRef, "setMetadata");
  assertMetadataKey(key);
  let metadataForKey = metadataMap[key];
  if (metadataForKey == null) {
    metadataForKey = metadataMap[key] = {};
  }
  if (kind === 1) {
    let pub = metadataForKey.public;
    if (pub === undefined) {
      pub = metadataForKey.public = {};
    }
    pub[property] = value;
  } else if (kind === 2) {
    let priv = metadataForKey.private;
    if (priv === undefined) {
      priv = metadataForKey.private = new Map();
    }
    priv.set(property, value);
  } else {
    metadataForKey.constructor = value;
  }
}

function convertMetadataMapToFinal(obj, metadataMap) {
  const parentMetadataMap = obj[Symbol.metadata || Symbol.for("Symbol.metadata")];
  const metadataKeys = Reflect.ownKeys(metadataMap);
  if (metadataKeys.length === 0) return;
  for (const i of metadataKeys.values()) {
    const key = i;
    const metaForKey = metadataMap[key];
    const parentMetaForKey = parentMetadataMap ? parentMetadataMap[key] : null;
    let pub = metaForKey.public;
    let parentPub = parentMetaForKey ? parentMetaForKey.public : null;
    if (pub && parentPub) {
      Object.setPrototypeOf(pub, parentPub);
    }
    let priv = metaForKey.private;
    if (priv) {
      priv = [...priv.values()];
      const parentPriv = parentMetaForKey ? parentMetaForKey.private : null;
      if (parentPriv) {
        priv = [...priv, ...parentPriv];
      }
      metaForKey.private = priv;
    }
    if (parentMetaForKey) {
      Object.setPrototypeOf(metaForKey, parentMetaForKey);
    }
  }
  if (parentMetadataMap) {
    Object.setPrototypeOf(metadataMap, parentMetadataMap);
  }
  obj[Symbol.metadata || Symbol.for("Symbol.metadata")] = metadataMap;
}

function createAddInitializerMethod(initializers, decoratorFinishedRef) {
  return function addInitializer(initializer) {
    assertNotFinished(decoratorFinishedRef, "addInitializer");
    assertCallable(initializer, "An initializer");
    initializers.push(initializer);
  };
}

function memberDec(dec, name, desc, metadataMap, initializers, kind, isStatic, isPrivate, value) {
  let kindStr;
  switch (kind) {
    case 1:
      kindStr = "accessor";
      break;
    case 2:
      kindStr = "method";
      break;
    case 3:
      kindStr = "getter";
      break;
    case 4:
      kindStr = "setter";
      break;
    default:
      kindStr = "field";
  }
  const ctx = {
    kind: kindStr,
    name: isPrivate ? "#" + name : name,
    isStatic: isStatic,
    isPrivate: isPrivate
  };
  let decoratorFinishedRef = {
    v: false
  };
  if (kind !== 0) {
    ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
  }
  let metadataKind, metadataName;
  if (isPrivate) {
    metadataKind = 2;
    metadataName = Symbol(name);
    const access = {};
    if (kind === 0) {
      access.get = desc.get;
      access.set = desc.set;
    } else if (kind === 2) {
      access.get = function () {
        return desc.value;
      };
    } else {
      if (kind === 1 || kind === 3) {
        access.get = function () {
          return desc.get.call(this);
        };
      }
      if (kind === 1 || kind === 4) {
        access.set = function (v) {
          desc.set.call(this, v);
        };
      }
    }
    ctx.access = access;
