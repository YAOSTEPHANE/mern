"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toPrimitive;

/**
 * Converts an input value to a primitive value based on the provided hint.
 * @param {*} input - The input value to convert.
 * @param {string?} hint - The hint to use when converting the value. Can be "string", "number", or "default".
 * @returns {*} The converted primitive value.
 * @throws {TypeError} If the @@toPrimitive method returns an object.
 */
function toPrimitive(input, hint) {
  if (input === null || typeof input !== "object") return input;

  // If the input has a @@toPrimitive method, use it to convert the value.
  const prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    let res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }

  // If no @@toPrimitive method is present, use the default conversion based on the hint.
  if (hint === "string") return String(input);
  if (hint === "number") return Number(input);
  return ({}.toString.call(input)) === "[object Number]" ? Number(input) : String(input);
}

//# sourceMappingURL=toPrimitive.js.map
