"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AsyncGenerator;

// Import OverloadYield
const { OverloadYield } = require("OverloadYield");

// AsyncGenerator class
function AsyncGenerator(gen) {
  // Queue data structure for storing requests
  let front, back;

  // send function for sending requests to the generator
  function send(key, arg) {
    return new Promise((resolve, reject) => {
      const request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  // resume function for resuming the generator
  function resume(key, arg) {
    try {
      const result = gen[key](arg);
      const value = result.value;
      const overloaded = value instanceof OverloadYield;

      // Handle OverloadYield values
      Promise.resolve(overloaded ? value.v : value)
        .then(arg => {
          if (overloaded) {
            const nextKey = key === "return" ? "return" : "next";

            if (!value.k || arg.done) {
              return resume(nextKey, arg);
            } else {
              arg = gen[nextKey](arg).value;
            }
          }

          // Settle the promise based on the generator result
          settle(result.done ? "return" : "normal", arg);
        })
        .catch(err => {
          resume("throw", err);
        });
    } catch (err) {
      settle("throw", err);
    }
  }

  // settle function for settling the promise
  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;
      case "throw":
        front.reject(value);
        break;
      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    // Update the queue
    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  // _invoke method for invoking the generator methods
  this._invoke = send;

  // Check if the generator has a return method
  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

// AsyncGenerator prototype methods
AsyncGenerator.prototype[Symbol.asyncIterator] = AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function () {
  return this;
};

AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

//# sourceMappingURL=AsyncGenerator.js.map

