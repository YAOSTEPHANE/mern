"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _wrapRegExp;

// Import setPrototypeOf and inherits modules
const setPrototypeOf = require("setPrototypeOf");
const inherits = require("inherits");

// Define the wrapRegExp function
function _wrapRegExp() {
  exports.default = _wrapRegExp = function (re, groups) {
    // Check if re is an instance of RegExp
    if (!(re instanceof RegExp)) {
      throw new Error("re must be an instance of RegExp");
    }

    // Check if groups is an object
    if (groups && typeof groups !== "object") {
      throw new Error("groups must be an object");
    }

    return new BabelRegExp(re, undefined, groups);
  };

  // Define the BabelRegExp constructor
  function BabelRegExp(re, flags, groups) {
    // Check if re is an instance of RegExp
    if (!(re instanceof RegExp)) {
      throw new Error("re must be an instance of RegExp");
    }

    var _this = new RegExp(re, flags);

    // Set the groups property of the BabelRegExp instance
    _groups.set(_this, groups || _groups.get(re));

    // Set the prototype of the BabelRegExp instance to RegExp.prototype
    return setPrototypeOf(_this, BabelRegExp.prototype);
  }

  // Inherit from RegExp.prototype
  inherits(BabelRegExp, RegExp);

  // Define the exec method of BabelRegExp
  BabelRegExp.prototype.exec = function (str) {
    var result = RegExp.prototype.exec.call(this, str);

    if (result) {
      result.groups = buildGroups(result, this);

      // Add groups property to the indices property of the result object
      if (result.indices) {
        result.indices.groups = buildGroups(result.indices, this);
      }
    }

    return result;
  };

  // Define the [Symbol.replace] method of BabelRegExp
  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
    // Check if substitution is a string
    if (typeof substitution === "string") {
      var groups = _groups.get(this);

      // Replace $<name> placeholders in the substitution string
      return RegExp.prototype[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
        var group = groups[name];

        // If the group is an array, join its elements with $
        return "$" + (Array.isArray(group) ? group.join("$") : group);
      }));
    }

    // Check if substitution is a function
    if (typeof substitution === "function") {
      var _this = this;

      // Call the substitution function with the additional groups object
      return RegExp.prototype[Symbol.replace].call(this, str, function () {
        var args = arguments;

        // If the last argument is not an object, add the groups object
        if (typeof args[args.
