"use strict";

const helpers = {};

helpers.helper = (minVersion, source) => ({
  minVersion,
  ast: () => ({
    type: "Program",
    body: _template.default.ast(source, {
      preserveComments: true,
    }),
  }),
});

helpers.applyDecs = (e, t, a) => {
  const r = [];
  const o = {};
  const i = {};

  const n = (e, t) => {
    const r = {};
    const n = {};
    let s = 0;

    for (const o of t) {
      if (Array.isArray(o)) {
        const c = o[1],
          d = o[2],
          u = o.length > 3,
          f = c >= 5;

        if (f) {
          const l = e;
          const h = d >= 5 ? n : o[2];
          const p = u ? n : r;

          if (0 !== c && !h) {
            const v = f ? p : r;
            const g = v.get(h) || 0;

            if (!0 === g || 3 === g && 4 !== c || 4 === g && 3 !== c) {
              throw new Error(
                `Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: ${h}`
              );
            }

            !g && c > 2 && v.set(h, c);
          }

          applyMemberDec(e, l, o, h, c, f, u, p);
        }
      }
    }

    return r;
  };

  const s = (e, t) => {
    const r = {};
    const n = {};

    for (const o of t) {
      if (Array.isArray(o)) {
        const i = o[1],
          s = o[2],
          c = o.length > 3,
          d = i >= 5;

        if (d) {
          const u = e;
          const f = s >= 5 ? n : o[2];
          const p = c ? n : r;

          if (0 !== i && !f) {
            const v = d ? p : r;
            const g = v.get(f) || 0;

            if (!0 === g || 3 === g && 4 !== i || 4 === g && 3 !== i) {
              throw new Error(
                `Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: ${f}`
              );
            }

            !g && i > 2 && v.set(f, c ? i : !0);
          }

          applyMemberDec(e, u, o, f, i, d, c, p);
        }
      }
    }

    return r;
  };

  const applyMemberDec = (e, t, r, n, o, i, a, u) => {
    const c = r[0];

    if (a) {
      if (0 === o || 1 === o) {
        const l = { get: r[3], set: r[4] };
        const h = "get";

        if (1 === o) {
          setFunctionName(r[4], "#" + n, "set");
          setFunctionName(r[3], "#" + n, h);
        }

        u.set(h, l);
      } else if (3 === o) {
        const l = { get: r[3] };
        const h = "get";

        if (3 === o) {
          setFunctionName(r[3], "#" + n, h);
        }

        u.set(h, l);
      } else if (4 === o) {
        const l = { set: r[3] };
        const h = "set";

        if (4 === o) {
          setFunctionName(r[3], "#" + n, h);
        }

        u.set(h, l);
      } else {
        u.set("value", r[3]);
      }

      if (0 !== o && 1 !== o) {
        const l = Object.getOwnPropertyDescriptor(t, n);

        if (0 === o) {
          u.set("get", l.get);
          u.set("set", l.set);
        } else if (1 === o) {
          u.set("value", l.value);
        } else if (3 === o) {
          u.set("get", l.get);
        } else if (4 === o) {
          u.set("set", l.set);
        }
      }
    } else {
      if (0 === o) {
        u.set("get", c.get);
        u.set("set", c.set);
      } else if (1 === o) {
        u.set("value", c.value);
      } else if (3 === o) {
        u.set("get", c.get);
      } else if (4 === o) {
        u.set("set", c.set);
      }
    }

    if (0 === o || 1 === o) {
      const l = (e, t) => {
        if (t.length > 0) {
          for (const r of e) {
            r.call(t);
          }
        }

        return t;
      };

      const h = u.get("get");
      const p = u.get("set");

      if (h) {
        u.set("get", l(h, t));
      }

      if (p) {
        u.set("set", l(p, t));
      }

      if (0 === o) {
        e.push(l
