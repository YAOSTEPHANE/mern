"use strict";

import { ObjectKeys } from "type-fest";
import semver from "semver";
import { getLowestImplementedVersion, isUnreleasedVersion, semverify } from "./utils.js";
import type { Plugin } from "@babel/compat-data/plugins";

/**
 * Checks if all target environments are supported by the given support object
 * @param target - An object containing target environments and their corresponding version numbers
 * @param support - An object containing environment names and their corresponding support data
 * @returns {boolean} - True if all target environments are supported, false otherwise
 */
function targetsSupported(target: Record<string, string>, support: Record<string, Plugin>): boolean {
  const targetEnvironments: ObjectKeys<typeof target> = Object.keys(target);
  if (targetEnvironments.length === 0) {
    return false;
  }
  const unsupportedEnvironments: string[] = targetEnvironments.filter((environment) => {
    const lowestImplementedVersion = getLowestImplementedVersion(support, environment);
    if (!lowestImplementedVersion) {
      return true;
    }
    const lowestTargetedVersion = target[environment];
    if (isUnreleasedVersion(lowestTargetedVersion, environment)) {
      return false;
    }
    if (isUnreleasedVersion(lowestImplementedVersion, environment)) {
      return true;
    }
    if (!semver.valid(lowestTargetedVersion.toString())) {
      throw new Error(`Invalid version passed for target "${environment}": "${lowestTargetedVersion}". ` + "Versions must be in semver format (major.minor.patch)");
    }
    return semver.gt(semverify(lowestImplementedVersion), lowestTargetedVersion.toString());
  });
  return unsupportedEnvironments.length === 0;
}

/**
 * Checks if a plugin is required based on the given targets and compatibility data
 * @param name - The name of the plugin
 * @param targets - An object containing target environments and their corresponding version numbers
 * @param options - An object containing compatibility data, includes, and excludes
 * @returns {boolean} - True if the plugin is required, false otherwise
 */
function isRequired(name: string, targets: Record<string, string>, options: {
  compatData?: Record<string, Plugin>,
  includes?: Set<string>,
  excludes?: Set<string>
} = {}): boolean {
  const { compatData = {}, includes, excludes } = options;
  if (excludes != null && excludes.has(name)) return false;
  if (includes != null && includes.has(name)) return true;
  if (!compatData[name]) {
    throw new Error(`Plugin "${name}" not found in compatibility data`);
  }
  return !targetsSupported(targets, compatData[name]);
}

/**
 * Filters a list of plugins based on the given includes, excludes, targets, and plugin syntax map
 * @param list - An array of plugin names
 * @param includes - A set of plugin names to include
 * @param excludes - A set of plugin names to exclude
 * @param targets - An object containing target environments and their corresponding version
