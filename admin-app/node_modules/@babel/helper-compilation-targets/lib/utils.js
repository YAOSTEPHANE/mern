"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHighestUnreleased = getHighestUnreleased;
exports.getLowestImplementedVersion = getLowestImplementedVersion;
exports.getLowestUnreleased = getLowestUnreleased;
exports.isUnreleasedVersion = isUnreleasedVersion;
exports.semverMin = semverMin;
exports.semverify = semverify;
const semver = require("semver");
const { OptionValidator } = require("@babel/helper-validator-option");
const targets = require("./targets.js");

const versionPattern = /^(\d+|\d+.\d+)$/;
const versionValidator = new OptionValidator("@babel/helper-compilation-targets");

function semverMin(first, second) {
  versionValidator.invariant(
    typeof first === "string" && semver.valid(first),
    `'${first}' is not a valid version`
  );
  versionValidator.invariant(
    typeof second === "string" && semver.valid(second),
    `'${second}' is not a valid version`
  );

  return semver.lt(first, second) ? first : second;
}

function semverify(version) {
  if (typeof version === "string" && semver.valid(version)) {
    return version;
  }

  if (typeof version !== "string" || !versionPattern.test(version)) {
    throw new Error(`'${version}' is not a valid version`);
  }

  const dotPositions = [];
  let currentIndex = 0;
  let numDots = 0;

  while ((currentIndex = version.indexOf(".", currentIndex + 1)) > 0) {
    dotPositions.push(currentIndex);
    numDots++;
  }

  if (numDots === 1) {
    return version + ".0";
  }

  if (numDots === 0) {
    return version + ".0.0";
  }

  const paddingLength = 2 - numDots;
  const padding = "0".repeat(paddingLength);

  return (
    version.slice(0, dotPositions[dotPositions.length - 1]) +
    padding
  );
}

function isUnreleasedVersion(version, env) {
  const unreleasedLabel = targets.unreleasedLabels[env];
  return (
    !!unreleasedLabel && unreleasedLabel.toLowerCase() === version.toString().toLowerCase()
  );
}

function getLowestUnreleased(a, b, env) {
  const unreleasedLabel = targets.unreleasedLabels[env];

  if (a === unreleasedLabel) {
    return b;
  }

  if (
