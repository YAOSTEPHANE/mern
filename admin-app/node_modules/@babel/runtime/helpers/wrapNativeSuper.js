// getPrototypeOf.js
var getPrototypeOf = Function.getPrototypeOf || function (O) { return O.__proto__ || Object.getPrototypeOf(O); };
module.exports = getPrototypeOf;

// setPrototypeOf.js
var setPrototypeOf = Function.setPrototypeOf || function (O, proto) {
  O.__proto__ = proto;
  return O;
};
module.exports = setPrototypeOf;

// isNativeFunction.js
var isNative = require('lodash/isNative');
var isFunction = require('lodash/isFunction');
function isNativeFunction(value) {
  return isNative(value) && isFunction(value);
}
module.exports = isNativeFunction;

// construct.js
var construct = Function.construct || function (Target, args, newTarget) {
  if (Target == null) throw new TypeError('Target cannot be null');
  if (typeof Target !== 'function') throw new TypeError('Target must be a function');
  var prototype = getPrototypeOf(Target.prototype);
  var instance = Object.create(prototype);
  var result = Target.apply(instance, args);
  if (typeof result === 'object' && result !== null) return result;
  return instance;
};
module.exports = construct;

// wrapNativeSuper.js
var getPrototypeOf = require("./getPrototypeOf");
var setPrototypeOf = require("./setPrototypeOf");
var isNativeFunction = require("./isNativeFunction");
var construct = require("./construct");
function _wrapNativeSuper(Class) {
  if (Class === null || !isNativeFunction(Class)) return Class;
  if (typeof Class !== "function") {
    throw new TypeError("Super expression must either be null or a function");
  }
  function Wrapper() {
    return construct(Class, arguments, getPrototypeOf(this).constructor);
  }
  Wrapper.prototype = Object.create(Class.prototype, {
    constructor: {
      value: Wrapper,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  return set
