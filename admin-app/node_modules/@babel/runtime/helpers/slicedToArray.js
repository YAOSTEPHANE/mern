// arrayWithHoles.js provides a fallback for arrays with holes
// iterableToArrayLimit.js provides a fallback for iterables that can be limited
// unsupportedIterableToArray.js provides a fallback for unsupported iterables
// nonIterableRest.js provides a fallback for non-iterable objects in rest parameters

const arrayWithHoles = require("./arrayWithHoles.js");
const iterableToArrayLimit = require("./iterableToArrayLimit.js");
const unsupportedIterableToArray = require("./unsupportedIterableToArray.js");
const nonIterableRest = require("./nonIterableRest.js");

function _slicedToArray(arr, i) {
  return (
    arrayWithHoles(arr) ||
    iterableToArrayLimit(arr, i) ||
    unsupportedIterableToArray(arr, i) ||
    nonIterableRest()
  );
}

module.exports = _slicedToArray;
module.exports.default = _slicedToArray;
