// This function converts an iterable object (e.g. an array or a string) into an array with at most `r` elements.
// If `r` is not provided, the function returns the entire iterable as an array.
// If `r` is less than 0, the function throws an error.
function _iterableToArrayLimitLoose(e, r = Infinity) {
  // Check if `r` is a number and is not less than 0
  if (typeof r !== 'number' || r < 0) {
    throw new Error('`r` must be a positive number or undefined');
  }

  // Get the iterable's iterator
  const t = e && ('undefined' != typeof Symbol && e[Symbol.iterator] || e["@@iterator"]);

  // If the iterable has an iterator, use Array.from() to convert it to an array with at most `r` elements
  if (null != t) {
    return Array.from({ length: r }, (_, i) => {
      const { value, done } = t.next();
      return done ? undefined : value;
    }).slice(0, r);
  }

  // If the iterable doesn't have an iterator, return it as an array with one element (the iterable itself)
  return [e];
}

module.exports = _iterableToArrayLimitLoose;
