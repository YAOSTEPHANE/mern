// classApplyDescriptorSet.js
export function classApplyDescriptorSet(receiver, descriptor, value) {
  Object.defineProperty(receiver, descriptor.key, descriptor.descriptor);
  receiver[descriptor.key] = value;
}

// classExtractFieldDescriptor.js
export function classExtractFieldDescriptor(receiver, privateMap, accessType) {
  const mapKey = privateMap.key;
  const mapHasOwn = privateMap.has;
  const mapGet = privateMap.get;

  const mapKeyFor = (key) => `${mapKey}.has(${key})`;
  const hasOwnCheck = new Function(mapKeyFor, `return ${mapHasOwn.name}.call(${mapKeyFor(mapKey)}, ${mapKeyFor(key)})`);

  const key = `_${accessType}${mapKey}`;
  if (!hasOwnCheck(key)) {
    throw new TypeError(`Unkeyed private field access is not supported: ${key}`);
  }

  const descriptor = {
    configurable: true,
    enumerable: false,
  };

  if (accessType === 'set') {
    descriptor.writable = true;
    descriptor.value = mapGet(key);
  } else {
    descriptor.get = function() {
      return mapGet(key);
    };
  }

  return descriptor;
}

// classPrivateFieldSet.js
import { classApplyDescriptorSet, classExtractFieldDescriptor } from "./classApplyDescriptorSet.js";

export default function classPrivateFieldSet(receiver, privateMap, value) {
  const descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
  classApplyDescriptorSet(receiver, descriptor, value);
  return value;
}
