export default function _possibleConstructorReturn(self, call) {
  if (
    call !== undefined &&
    (typeof call === "object" || typeof call === "function")
  ) {
    return call;
  }

  if (call !== void 0) {
    throw new TypeError(
      "Derived constructors may only return object or undefined"
    );
  }

  // If 'self' is not an object, throw an error
  if (typeof self !== "object") {
    throw new TypeError(
      "Cannot call 'possibleConstructorReturn' on a non-object"
    );
  }

  // If 'self' doesn't have a prototype, throw an error
  if (Object.getPrototypeOf(self) === null) {
    throw new TypeError(
      "Cannot call 'possibleConstructorReturn' on a non-constructor"
    );
  }

  return self;
}
