// getPrototypeOf.js
var getPrototypeOf = Function.getPrototypeOf || function (O) { return O.__proto__ || Object.getPrototypeOf(O) };

// isNativeReflectConstruct.js
var isNativeReflectConstruct = function () {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "undefined") return false;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [true], function () {}));
    return true;
  } catch (e) {
    return false;
  }
};

// possibleConstructorReturn.js
function possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

// _createSuper.js
var _createSuper = function (Derived) {
  var hasNativeReflectConstruct = isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return possibleConstructorReturn(this, result);
  };
};

module.exports = _createSuper;
