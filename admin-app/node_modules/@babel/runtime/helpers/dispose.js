function createSuppressedError(suppressedError, error) {
  if (typeof SuppressedError !== 'undefined') {
    return new SuppressedError(suppressedError, error);
  } else {
    function SuppressedError(suppressed, err) {
      this.suppressed = suppressed;
      this.error = err;
      this.stack = new Error().stack;
    }

    SuppressedError.prototype = Object.create(Error.prototype, {
      constructor: {
        value: SuppressedError,
        writable: true,
        configurable: true
      }
    });

    return new SuppressedError(suppressedError, error);
  }
}

function handleError(error, onError, suppressError) {
  if (suppressError) {
    onError(createSuppressedError(error, onError.suppressedError));
  } else {
    onError(error);
  }
}

function _dispose(tasks, onError, suppressError) {
  function next() {
    if (tasks.length > 0) {
      try {
        const task = tasks.pop();
        const result = task.d.call(task.v);

        if (task.a) {
          return Promise.resolve(result).then(next, err);
        }
      } catch (error) {
        return handleError(error, onError, suppressError);
      }
    }

    if (suppressError) {
      throw onError.suppressedError;
    }
  }

  function err(error) {
    onError.suppressedError = error;
    suppressError = true;
    next();
  }

  return next();
}

module.exports = _dispose;
module.exports.__esModule = true;
