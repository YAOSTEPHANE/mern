"use strict";

import { NodePath } from "@babel/core";
import { declare } from "@babel/helper-plugin-utils";
import { annotateAsPure } from "@babel/helper-annotate-as-pure";
import { referencesImport } from "@babel/helper-module-imports";
import { types as t } from "@babel/core";

const PURE_CALLS = [
  ["react", new Set(["cloneElement", "createContext", "createElement", "createFactory", "createRef", "forwardRef", "isValidElement", "memo", "lazy"])],
  ["react-dom", new Set(["createPortal"])]
];

type CallExpressionPath = NodePath<t.CallExpression>;
type MemberExpressionPath = NodePath<t.MemberExpression>;

const isReactCall = (path: CallExpressionPath): boolean => {
  const calleePath = path.get("callee");
  if (calleePath.isMemberExpression()) {
    const object = calleePath.get("object");
    const property = calleePath.get("property");
    if (object.isIdentifier({ name: "react" }) && property.isIdentifier({ name: "default" })) {
      return PURE_CALLS[0].includes(property.node.name);
    }
    for (const [module, methods] of PURE_CALLS) {
      if (referencesImport(object, module, "default") || referencesImport(object, module, "*")) {
        return methods.has(property.node.name);
      }
    }
  }
  return false;
};

const plugin = declare((api) => {
  api.assertVersion(7);
  return {
    name: "transform-react-pure-annotations",
    visitor: {
      CallExpression(path) {
        if (isReactCall(path)) {
          annotateAsPure(path);
        }
      }
    }
  };
});

export default plugin;
