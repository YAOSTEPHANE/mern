"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const helperPluginUtils = require("@babel/helper-plugin-utils");
const helperBuilderBinaryAssignmentOperatorVisitor = require("@babel/helper-builder-binary-assignment-operator-visitor");
const core = require("@babel/core");

const defaultTransformer = (0, helperPluginUtils.declare)(api => {
  api.assertVersion(7);
  return {
    name: "transform-exponentiation-operator",
    visitor: helperBuilderBinaryAssignmentOperatorVisitor.default({
      operator: "**",
      build(left, right) {
        return core.types.callExpression(
          core.types.memberExpression(core.types.identifier("Math"), core.types.identifier("pow")),
          [left, right]
        );
      }
    })
  };
});

// Only export the transformer when the `--plugin-transform-runtime` flag is used
if (process.env.BABEL_PLUGIN_TRANSFORM_RUNTIME) {
  module.exports = defaultTransformer;
} else {
  // Otherwise, create a wrapper plugin that applies the transformer
  const { wrapPlugin } = require("@babel/helper-plugin-utils");

  module.exports = wrapPlugin(defaultTransformer, {
    transformFile: path => {
      const { code, map } = core.transformFileSync(path, {
        plugins: [[defaultTransformer, { instrumentalization: true }]]
      });
      return { code, map };
    }
  });
}

//# sourceMappingURL=index.js.map
