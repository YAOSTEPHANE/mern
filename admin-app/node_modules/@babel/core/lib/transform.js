"use strict";

import { ObjectDefineProperty } from "./utils/object-define-property";
import { gensync } from "gensync";
import * as config from "./config/index";
import * as transformation from "./transformation/index";
import * as errors from "./errors/rewrite-stack-trace";

const transformRunner = gensync<[string, any?], string | null>(function*(code, opts = {}) {
  const configResult = yield config.default(opts);
  if (configResult === null) return null;
  return yield transformation.run(configResult, code);
})();

const transform = ObjectDefineProperty(exports, "transform", {
  value: function transform(code: string, optsOrCallback?: any, maybeCallback?: any) {
    let opts: any;
    let callback: (error: Error | null, result?: string | null) => void;

    if (typeof optsOrCallback === "function") {
      callback = optsOrCallback;
      opts = undefined;
    } else {
      opts = optsOrCallback;
      callback = maybeCallback;
    }

    try {
      const result = transformRunner.sync(code, opts);
      callback(null, result);
    } catch (error) {
      callback(error);
    }
  },
}); as any;

const transformSync = ObjectDefineProperty(exports, "transformSync", {
  value: function(this: any, code: string, opts?: any) {
    return errors.beginHiddenCallStack(transformRunner.sync, code, opts);
  },
}) as any;

const transformAsync = ObjectDefineProperty(exports, "transformAsync", {
  value: function(this: any, code: string, opts?: any) {
    return errors.beginHiddenCallStack(transformRunner.async, code, opts);
  },
}) as any;

0 && 0;
