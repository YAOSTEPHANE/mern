"use strict";

import { data as t } from "@babel/types";
import { data as traverse } from "@babel/traverse";
import { data as codeFrame } from "@babel/code-frame";
import { data as helperModuleTransforms } from "@babel/helper-module-transforms";
import semver from "semver";

const { ensure, getDependencies, get } = helperModuleTransforms;

const errorVisitor = {
  enter(path) {
    const loc = path.node.loc;
    if (loc) {
      path.stop();
    }
  },
};

class File {
  constructor(
    options: any,
    { code, ast }: { code: string; ast: t.File; }
  ) {
    this._map = new Map();
    this.opts = options;
    this.declarations = {};
    this.path = void 0;
    this.ast = void 0;
    this.scope = void 0;
    this.metadata = {};
    this.code = "";
    this.hub = {
      file: this,
      getCode: () => this.code,
      getScope: () => this.scope,
      addHelper: this.addHelper.bind(this),
      buildError: this.buildCodeFrameError.bind(this),
    };
    this.code = code;
    this.ast = ast;
    this.path = traverse.NodePath.get({
      hub: this.hub,
      parentPath: null,
      parent: this.ast,
      container: this.ast,
      key: "program",
    }).setContext();
    this.scope = this.path.scope;
  }

  get shebang() {
    const { interpreter } = this.path.node;
    return interpreter ? interpreter.value : "";
  }

  set shebang(value) {
    if (value) {
      this.path.get("interpreter").replaceWith(t.interpreterDirective(value));
    } else {
      this.path.get("interpreter").remove();
    }
  }

  set<K extends string>(key: K, val: any) {
    if (key === "helpersNamespace") {
      throw new Error(
        "Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility." +
          "If you are using @babel/plugin-external-helpers you will need to use a newer " +
          "version than the one you currently have installed. " +
          "If you have your own implementation, you'll want to explore using 'helperGenerator' " +
          "alongside 'file.availableHelper()'."
      );
    }
    this._map.set(key, val);
  }

  get<K extends string>(key: K) {
    return this._map.get(key);
  }

  has<K extends string>(key: K) {
    return this._map.has(key);
  }

  getModuleName() {
    return helperModuleTransforms.getModuleName(this.opts, this.opts);
  }

  addImport() {
    throw new Error(
      "This API has been removed. If you're looking for this " +
        "functionality in Babel 7, you should import the " +
        "'@babel/helper-module-imports' module and use the functions exposed " +
        "from that module, such as 'addNamed' or 'addDefault'."
    );
  }

  availableHelper(name: string, versionRange: string) {
    let minVersion: string;
    try {
      minVersion = ensure(name, File);
    } catch (err) {
      if (err.code !== "BABEL_HELPER_UNKNOWN") throw err;
      return false;
    }
    if (typeof versionRange !== "string") return true;
    if (semver.valid(versionRange)) versionRange = `^${versionRange}`;
    return !semver.intersects(`<${minVersion}`, versionRange) &&
      !semver.intersects(`>=8.0.0`, versionRange);
  }

  addHelper(name: string) {
    const declar = this.declarations[name];
    if (declar) return declar;
    const generator = this.get("helperGenerator");
    if (generator) {
      const res = generator(name);
      if (res) return res;
    }
    ensure(name, File);
    const uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
    const dependencies = {};
    for (const dep of getDependencies(name)) {
      dependencies[dep] = this.addHelper(dep);
    }
    const { nodes, globals } = get(name, (dep) => dependencies[dep], uid, Object.keys(this.scope.getAllBindings()));
    globals.forEach((name) => {
      if (this.path.scope.hasBinding(name, true)) {
        this.path.scope.rename(name);
      }
    });
    nodes.forEach((node) => {
      node._compact = true;
    });
    this.path.unshiftContainer("body", nodes);
    this.path.get("body").forEach((path) => {
      if (nodes.indexOf(path.node) === -1) return;
      if (path.isVariableDeclaration()) this.scope.registerDeclaration(path);

