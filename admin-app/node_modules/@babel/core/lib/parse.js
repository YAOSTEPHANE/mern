// @ts-check

import { sync, async as gensyncAsync } from 'gensync';
import index from './config/index.js';
import parser from './parser/index.js';
import normalizeOpts from './transformation/normalize-opts.js';
import rewriteStackTrace from './errors/rewrite-stack-trace.js';

const parseRunner = (function* (code, opts) {
  const config = yield index(opts);
  if (config === null) {
    return null;
  }
  return yield parser(config.passes, normalizeOpts(config), code);
}) as (code: string, opts?: object) => Generator<any, any, any>;

const parse = (code: string, opts?: object, callback?: (err: Error | null, result?: any) => void): void => {
  if (typeof opts === 'function') {
    callback = opts;
    opts = undefined;
  }

  if (callback === undefined) {
    return rewriteStackTrace.beginHiddenCallStack(parseRunner.sync)(code, opts);
  }

  rewriteStackTrace.beginHiddenCallStack(parseRunner.errback)(code, opts, callback);
};

const parseSync = (code: string, opts?: object): any => rewriteStackTrace.beginHiddenCallStack(parseRunner.sync)(code, opts);
const parseAsync = (code: string, opts?: object): Promise<any> => rewriteStackTrace.beginHiddenCallStack(gensyncAsync)(parseRunner)(code, opts);

export { parse, parseSync, parseAsync };
