import { GeneratorFunction } from 'gensync';

interface AsyncFunction<T = any, R = any> {
  (...args: T[]): R | Promise<R>;
}

const isAsync = (fn: Function): boolean => {
  if (typeof fn !== 'function') {
    throw new Error('Input must be a function');
  }
  return fn.constructor.name === 'GeneratorFunction' || fn.async;
};

const isThenable = (val: any): boolean =>
  !!val &&
  ((typeof val === 'object' || typeof val === 'function') &&
    typeof val.then === 'function');

const maybeAsync = <T extends AsyncFunction | Function>(
  fn: T,
  message: string
): T => {
  if (isAsync(fn)) {
    return fn;
  }
  return (...args: any[]) =>
    new Promise<any>((resolve, reject) => {
      try {
        const result = (fn as Function).apply(this, args);
        if (isThenable(result)) {
          resolve(result);
        } else {
          reject(new Error(message));
        }
      } catch (err) {
        reject(err);
      }
    });
};

const runGenerator = <T>(item: GeneratorFunction<T>): T => {
  return item.next().value;
};

const withKind = <T extends 'sync' | 'async'>(
  kind: T,
  fn: (kind: T) => GeneratorFunction<T>
): GeneratorFunction<T> => fn(kind);

const forwardAsync = (action: GeneratorFunction<any>, cb: (val: any) => void) => {
  const g = action;
  return withKind('kind', (kind: 'sync' | 'async') => {
    const adapted = g[kind];
    return cb(adapted);
  });
};

const onFirstPause = (item: GeneratorFunction<any>, firstPause: () => void, cb: (err: Error | null, val: any) => void) => {
  let completed = false;
  runGenerator(item).then(
    (val: any) => {
      completed = true;
      cb(null, val);
    },
    (err: Error) => {
      completed = true;
      cb(err, null);
    }
  );
  if (!completed) {
    firstPause();
  }
};

const waitFor = <T>(x: T): T => x;

(async () => {
  const asyncFunction = async (): Promise<number> => {
    return 42;
  };

  const syncFunction = (): number => {
    return 42;
  };

  const asyncWrapper = maybeAsync(syncFunction, 'Function is not async');
  const syncWrapper = maybeAsync(asyncFunction, 'Function is not sync');

  console.log(await asyncWrapper());
  console.log(await syncWrapper());
})();
