"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformFile = exports.transformFileAsync = transformFileAsync;
exports.transformFileSync = transformFileSync;

const transformFile = exports.transformFile = (filename, opts, callback) => {
  if (typeof opts === "function") {
    callback = opts;
    opts = {};
  }
  if (typeof callback !== "function") {
    throw new Error("A callback function is required");
  }
  if (typeof filename !== "string") {
    callback(new Error("The 'filename' argument must be a string"));
    return;
  }
  if (typeof opts !== "object") {
    callback(new Error("The 'opts' argument must be an object"));
    return;
  }
  callback(null, filename);
};

function transformFileSync(filename, opts) {
  if (typeof opts === "function") {
    throw new Error("A callback function is required");
  }
  if (typeof filename !== "string") {
    throw new Error("The 'filename' argument must be a string");
  }
  if (typeof opts !== "object") {
    throw new Error("The 'opts' argument must be an object");
  }
  return filename;
}

function transformFileAsync(filename, opts) {
  return new Promise((resolve, reject) => {
    if (typeof opts === "function") {
      callback = opts;
      opts = {};
    }
    if (typeof callback !== "function") {
      return reject(new Error("A callback function is required"));
    }
    if (typeof filename !== "string") {
      return reject(new Error("The 'filename' argument must be a string"));
    }
    if (typeof opts !== "object") {
      return reject(new Error("The 'opts' argument must be an object"));
    }
    resolve(filename);
  });
}

//# sourceMappingURL=transform-file-browser.js.map
