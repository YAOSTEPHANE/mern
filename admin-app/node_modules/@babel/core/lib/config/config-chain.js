"use strict";

import { debug as debugModule } from "debug";
import path from "path";
import {
  buildRootDescriptors,
  buildEnvDescriptors,
  buildOverrideDescriptors,
  buildOverrideEnvDescriptors,
  makeChainWalker,
  mergeChain,
  mergeChainOpts,
  emptyChain,
  normalizeOptions,
  dedupDescriptors,
  configIsApplicable,
  configFieldIsApplicable,
  matchesPatterns,
  shouldIgnore,
  mergeExtendsChain,
} from "./config-descriptors";
import {
  loadFileChain,
  loadFileDescriptors,
  loadFileEnvDescriptors,
  loadFileOverridesDescriptors,
  loadFileOverridesEnvDescriptors,
} from "./files";
import {
  validateConfigFile,
  validateBabelrcFile,
  validateExtendFile,
} from "./validation/options";
import { ConfigPrinter } from "./printer";
import { rewriteStackTrace } from "../errors/rewrite-stack-trace";
import { ConfigError } from "../errors/config-error";
import { findPackageData, findRootConfig, loadConfig } from "../files/index";
import { makeWeakCacheSync, makeStrongCacheSync } from "./caching";

const debug = debugModule("babel:config:config-chain");

// ... rest of the code

export { buildPresetChain, buildRootChain };


// config-descriptors.ts

import { ConfigDescriptor } from "../types";
import { normalizeConfig } from "../config";

export function mergeExtendsChain(
  chain: ConfigDescriptor,
  opts: any,
  dirname: string,
  context: any,
  files: Set<any>,
  baseLogger: ConfigPrinter
): boolean {
  // ...
}

// ... rest of the code



// files.ts

import { parseConfigFile } from "babel__core";
import { readFileSync } from "fs";
import { resolve as pathResolve } from "path";

export function loadFileChain(
  input: any,
  context: any,
  files: Set<any>,
  baseLogger: ConfigPrinter
): Promise<ConfigDescriptor | null> {
  // ...
}

// ... rest of the code



// validation/options.ts

import { ConfigDescriptor } from "../types";

export function validateConfigFile(file: any): ConfigDescriptor {
  // ...
}

export function validateBabelrcFile(file: any): ConfigDescriptor {
  // ...
}

export function validateExtendFile(file: any): ConfigDescriptor {
  // ...
}

// ... rest of the code



// printer.ts

import chalk from "chalk";
import { ConfigDescriptor } from "../types";

export class ConfigPrinter {
  // ...
}

// ... rest of the code



// types.ts

export type ConfigDescriptor = {
  options: any[];
  plugins: any[];
  presets: any[];
  files: Set<string>;
};

export type ConfigField = string | RegExp | ((file: string, context: any) => boolean);

export type ConfigFields = ConfigField | ConfigField[];

export type Config = {
  extends?: string | ConfigDescriptor;
  env?: {
    [key: string]: any;
  };
  overrides?: {
    [index: number]: any;
  }[];
  options?: any;
  plugins?: ConfigFields;
  presets?: ConfigFields;
  passPerPreset?: boolean;
  ignore?: ConfigFields;
  only?: ConfigFields;
  test?: ConfigFields;
  include?: ConfigFields;
  exclude?: ConfigFields;
};

export type ConfigContext = {
  filename: string | null;
  cwd: string;
  root: string;
  envName: string;
  caller: any;
  showConfig: boolean;
};

// ... rest of the code

