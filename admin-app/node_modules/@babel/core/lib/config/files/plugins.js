"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadPlugin = loadPlugin;
exports.loadPreset = loadPreset;
exports.resolvePreset = exports.resolvePlugin = void 0;

const debug = require("debug")("babel:config:loading:files:plugins");
const path = require("path");
const async = require("../../gensync-utils/async.js");
const moduleTypes = require("./module-types.js");
const url = require("url");
const importMetaResolve = require("../../vendor/import-meta-resolve.js");
const fs = require("fs");

const EXACT_RE = /^module:/;
const BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/;
const BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/;
const BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/;
const BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/;
const OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/;
const OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/;
const OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;

const resolvePlugin = exports.resolvePlugin = (name, dirname, isAsync) =>
  resolveStandardizedName("plugin", name, dirname, isAsync);

const resolvePreset = exports.resolvePreset = (name, dirname, isAsync) =>
  resolveStandardizedName("preset", name, dirname, isAsync);

const standardizeName = (type, name) => {
  if (path.isAbsolute(name)) return name;
  const isPreset = type === "preset";
  return name
    .replace(
      isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE,
      `babel-${type}-`
    )
    .replace(
      isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE,
      `$1${type}-`
    )
    .replace(
      isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE,
      `$1babel-${type}-`
    )
    .replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`)
    .replace(EXACT_RE, "");
};

const resolveAlternativesHelper = async (type, name) => {
  const standardizedName = standardizeName(type, name);
  const { error, value } = await standardizedName;
  if (!error) return value;
  if (error.code !== "MODULE_NOT_FOUND") throw error;
  if (
    standardizedName !== name &&
    !(await tryRequireResolve(name)).error
  ) {
    error.message += `\n- If you want to resolve "${name}", use "module:${name}"`;
  }
  if (
    !(await tryRequireResolve(`@babel/${name}`)).error &&
    type === "preset"
  ) {
    error.message += `\n- Did you mean "@babel/${name}"?`;
  }
  if (
    !(await tryRequireResolve(`babel-${type}-${name}`)).error &&
    type === "plugin"
  ) {
    error.message += `\n- Did you mean "babel-${type}-${name}"?`;
  }
  if (type === "plugin") {
    const transformName = standardizedName.replace(
      "-proposal-",
      "-transform-"
    );
    if (transformName !== standardizedName &&
      !(await tryRequireResolve(transformName)).error) {
      error.message += `\n- Did you mean "${transformName}"?`;
    }
  }
  error.message += `\n
Make sure that all the Babel plugins and presets you are using
are defined as dependencies or devDependencies in your package.json
file. It's possible that the missing plugin is loaded by a preset
you are using that forgot to add the plugin to its dependencies: you
can workaround this problem by explicitly adding the missing package
to your top-level package.json.
`;
  throw error;
};

const tryRequireResolve = (id, dirname) => {
  try {
    if (dirname) {
      return require.resolve(id, { paths: [dirname] });
    } else {
      return require.resolve(id);
    }
  } catch (error) {
    return { error, value: null };
  }
};

const tryImportMetaResolve = async (id, options) => {
  try {
    return importMetaResolve(id, options);
  } catch (error) {
    return { error, value: null };
  }
};

const resolveStandardizedNameForRequire = (type, name, dirname) => {
  return resolveAlternativesHelper(type, name, true)
    .then(({ error, value }) => {
      if (!error) return value;
      if (error.code !== "MODULE_NOT_FOUND") throw error
