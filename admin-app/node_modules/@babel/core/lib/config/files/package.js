import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileCache } from './utils.js';
import ConfigError from '../../errors/config-error.js';

const PACKAGE_FILENAME = 'package.json';

/**
 * Reads and caches the contents of a package.json file.
 * @param {string} filepath - The filepath of the package.json file.
 * @returns {object|null} The parsed JSON object or null if the file doesn't exist.
 */
const readConfigPackage = fileCache(filepath => {
  const content = readFileSync(filepath, 'utf-8');
  let options;
  try {
    options = JSON.parse(content);
  } catch (err) {
    throw new ConfigError(`Error while parsing JSON - ${err.message}`, filepath);
  }
  if (!options) throw new Error(`${filepath}: No config detected`);
  if (typeof options !== 'object' || Array.isArray(options)) {
    throw new ConfigError(`Expected config object but found ${typeof options}`, filepath);
  }
  return { filepath, dirname: dirname(filepath), options };
});

/**
 * Finds the package.json file in the current directory or any parent directory.
 * @param {string} filepath - The filepath to start the search from.
 * @returns {object} An object containing the filepath, directories, pkg, and isPackage properties.
 */
function* findPackageData(filepath) {
  let pkg = null;
  const directories = [];
  let isPackage = true;
  let dirname = dirname(filepath);
  while (!pkg && dirname !== dirname(process.cwd())) {
    directories.push(dirname);
    pkg = yield readConfigPackage(join(dirname, PACKAGE_FILENAME));
    if (!pkg) {
      const nextLoc = dirname(dirname);
      if
