"use strict";

import {
  defineProperty,
  ObjectDefineProperty
} from "object-define-properties";
import * as _functional from "../gensync-utils/functional.js";
import * as _index from "./files/index.js";
import * as _caching from "./caching.js";
import * as _resolveTargets from "./resolve-targets.js";

const _gensync = () =>
  import("gensync").then((data) => data);

const isEqualDescriptor = (a: any, b: any) =>
  Object.entries(a).every(
    ([key, value]) =>
      key === "file"
        ? isEqualDescriptor(value, b.file)
        : value === b[key]
  );

const handlerOf = (value: any) =>
  value;

const optionsWithResolvedBrowserslistConfigFile = (
  options: any,
  dirname: string
): any => {
  if (typeof options.browserslistConfigFile === "string") {
    options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(
      options.browserslistConfigFile,
      dirname
    );
  }
  return options;
};

const createCachedDescriptors = (
  dirname: string,
  options: any,
  alias: string
): ObjectDefineProperty<any, "options", any> &
  ObjectDefineProperty<any, "plugins", any> &
  ObjectDefineProperty<any, "presets", any> => {
  const { plugins, presets, passPerPreset } = options;
  return {
    options: optionsWithResolvedBrowserslistConfigFile(options, dirname),
    plugins: plugins
      ? () =>
          createCachedPluginDescriptors(plugins, dirname)(alias)
      : () => handlerOf([]),
    presets: presets
      ? () =>
          createCachedPresetDescriptors(presets, dirname)(alias)(
            !!passPerPreset
          )
      : () => handlerOf([])
  };
};

const createUncachedDescriptors = (
  dirname: string,
  options: any,
  alias: string
): any => {
  return {
    options: optionsWithResolvedBrowserslistConfigFile(options, dirname),
    plugins: _functional.once(() =>
      createPluginDescriptors(options.plugins || [], dirname, alias)
    ),
    presets: _functional.once(() =>
      createPresetDescriptors(options.presets || [], dirname, alias, !!options.passPerPreset)
    )
  };
};

const PRESET_DESCRIPTOR_CACHE = new WeakMap<
  any,
  WeakMap<any, any[]>
>();

const createCachedPresetDescriptors = (
  items: any[],
  cache: any
): (alias: string, passPerPreset: boolean) => any[] => {
  const dirname = cache.using((dir) => dir);
  return (alias: string, passPerPreset: boolean) =>
    _caching.makeStrongCacheSync<any[]>(
      (function* () {
        const descriptors = yield* createPresetDescriptors(
          items,
          dirname,
          alias,
          passPerPreset
        );
        return descriptors.map((desc) =>
          loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc)
        );
      })()
    );
};

const PLUGIN_DESCRIPTOR_CACHE = new WeakMap<
  any,
  WeakMap<any, any[]>
>();

const createCachedPluginDescriptors = (
  items: any[],
  cache: any
): (alias: string) => any[] => {
  const dirname = cache.using((dir) => dir);
  return (alias: string) =>
    _caching.makeStrongCache<any[]>(
      (function* () {
        const descriptors = yield* createPluginDescriptors(
          items,
          dirname,
          alias
        );
        return descriptors.map((desc) =>
          loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc)
        );
      })()
    );
};

const DEFAULT_OPTIONS = {};

const loadCachedDescriptor = (
  cache: WeakMap<any, WeakMap<any, any[]>>,
  desc: any
): any => {
  const { value, options = DEFAULT_OPTIONS } = desc;
  if (options === false) return desc;
  let cacheByOptions = cache.get(value);
  if (!cacheByOptions) {
    cacheByOptions = new WeakMap();
    cache.set(value, cacheByOptions);
  }
  let possibilities = cacheByOptions.get(options);

