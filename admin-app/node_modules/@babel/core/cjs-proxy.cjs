"use strict";

const babelP = import("./lib/index.js");
let babel = null;
Object.defineProperty(exports, "__esModule", {
  value: true,
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: () => require("./package.json").version,
});

const functionNames = [
  "createConfigItem",
  "loadPartialConfig",
  "loadOptions",
  "transform",
  "transformFile",
  "transformFromAst",
  "parse",
];
const propertyNames = ["types", "tokTypes", "traverse", "template"];

async function loadBabel() {
  if (!babel) {
    babel = await babelP;
  }
}

for (const name of functionNames) {
  exports[name] = async (...args) => {
    await loadBabel();
    return babel[name](...args);
  };
  exports[`${name}Async`] = async (...args) => {
    await loadBabel();
    return babel[`${name}Async`](...args);
  };
  exports[`${name}Sync`] = (...args) => {
    if (!babel) {
      throw new Error(
        `The \`${name}\` export of @babel/core is only accessible after the ESM version is loaded.`
      );
    }
    return babel[`${name}Sync`](...args);
  };
}

for (const name of propertyNames) {
  Object.defineProperty(exports, name, {
    enumerable: true,
    get: async () => {
      await loadBabel();
      return babel[name];
    },
  });
}

