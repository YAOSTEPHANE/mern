"use strict";

const { default: normalizeOptions } = require("./normalize-options.js");
const { default: _printer } = require("@babel/printer");
const { default: _sourceMap } = require("@babel/generator").default;
const { default: createClassFeaturesPlugin } = require("@babel/helper-create-class-features-plugin");

module.exports = {
  CodeGenerator: class CodeGenerator {
    constructor(ast, opts = {}, code) {
      this._ast = ast;
      this._format = normalizeOptions(code, opts);
      this._map = opts.sourceMaps ? new _sourceMap(opts, code) : null;
    }

    generate() {
      const printer = new _printer(this._format, this._map);
      return printer.generate(this._ast);
    }
  },

  generate: (ast, opts = {}, code) => {
    const format = normalizeOptions(code, opts);
    const map = opts.sourceMaps ? new _sourceMap(opts, code) : null;
    const printer = new _printer(format, map);
    return printer.generate(ast);
  }
};

//# sourceMappingURL=index.js.map


"use strict";

const _sourceMap = require("./source-map.js");
const _printer = require("./printer.js");

function normalizeOptions(code, opts = {}) {
  const format = {
    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
    shouldPrintComment: opts.shouldPrintComment,
    retainLines: opts.retainLines,
    retainFunctionParens: opts.retainFunctionParens,
    comments: opts.comments || false,
    compact: opts.compact,
    minified: opts.minified,
    concise: opts.concise,
    indent: {
      adjustMultilineComment: true,
      style: "  "
    },
    jsescOption: Object.assign(
      {
        quotes: "double",
        wrap: true,
        minimal: false
      },
      opts.jsescOption
    ),
    recordAndTupleSyntaxType: opts.recordAndTupleSyntaxType || "hash",
    topicToken: opts.topicToken,
    importAttributesKeyword: opts.importAttributesKeyword
  };

  format.decoratorsBeforeExport = opts.decoratorsBeforeExport;
  format.jsescOption.json = opts.jsonCompatibleStrings;

  if (format.minified) {
    format.compact = true;
    format.shouldPrintComment = format.shouldPrintComment || (value => format.comments || value.includes("@license") || value.includes("@preserve"));
  } else {
    format.shouldPrintComment = format.shouldPrintComment || (value => format.comments || value.includes("@license") || value.includes("@preserve"));
  }

  if (format.compact === "auto") {
    format.compact = typeof code === "string" && code.length > 500000;
    if (format.compact) {
      console.error(
        "[BABEL] Note: The code generator has deoptimised the styling of " +
          `${opts.filename} as it exceeds the max of ${"500KB"}.`
      );
    }
  }

  if (format.compact) {
    format.indent.adjustMultilineComment = false;
  }

  const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } = format;

  if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) {
    format.auxiliaryCommentBefore = undefined;
  }

  if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) {
    format.auxiliaryCommentAfter = undefined;
  }

  return format;
}

module.exports = {
  default: normalizeOptions
};
