"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArgumentPlaceholder = ArgumentPlaceholder;
exports.ArrayPattern = exports.ArrayExpression = ArrayExpression;
exports.BigIntLiteral = BigIntLiteral;
exports.BooleanLiteral = BooleanLiteral;
exports.DecimalLiteral = DecimalLiteral;
exports.Identifier = Identifier;
exports.NullLiteral = NullLiteral;
exports.NumericLiteral = NumericLiteral;
exports.ObjectPattern = exports.ObjectExpression = ObjectExpression;
exports.ObjectMethod = ObjectMethod;
exports.ObjectProperty = ObjectProperty;
exports.PipelineBareFunction = PipelineBareFunction;
exports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;
exports.PipelineTopicExpression = PipelineTopicExpression;
exports.RecordExpression = RecordExpression;
exports.RegExpLiteral = RegExpLiteral;
exports.SpreadElement = exports.RestElement = RestElement;
exports.StringLiteral = StringLiteral;
exports.TopicReference = TopicReference;
exports.TupleExpression = TupleExpression;
var _t = require("@babel/types");
var _jsesc = require("jsesc");
const {
  isAssignmentPattern,
  isIdentifier
} = _t;

class Identifier extends _t.NodeVisitor {
  constructor(node) {
    super();
    this.sourceIdentifierName(((_node$loc = node.loc) == null ? void 0 : _node$loc.identifierName) || node.name);
    this.word(node.name);
  }
}

class ArgumentPlaceholder {
  constructor() {
    this.tokenChar(63);
  }
}

class RestElement extends _t.NodeVisitor {
  constructor(node) {
    super();
    this.token("...");
    this.print(node.argument, node);
  }
}

class ObjectExpression extends _t.NodeVisitor {
  constructor(node) {
    super();
    const props = node.properties;
    this.tokenChar(123);
    if (props.length) {
      this.space();
      this.printList(props, node, {
        indent: true,
        statement: true
      });
      this.space();
    }
    this.sourceWithOffset("end", node.loc, -1);
    this.tokenChar(125);
  }
}

class ObjectMethod extends _t.NodeVisitor {
  constructor(node) {
    super();
    this.printJoin(node.decorators, node);
    this._methodHead(node);
    this.space();
    this.print(node.body, node);
  }
}

class ObjectProperty extends _t.NodeVisitor {
  constructor(node) {
    super();
    this.printJoin(node.decorators, node);
    if (node.computed) {
      this.tokenChar(91);
      this.print(node.key, node);
      this.tokenChar(93);
    } else {
      if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) {
        this.print(node.value, node);
        return;
      }
      this.print(node.
