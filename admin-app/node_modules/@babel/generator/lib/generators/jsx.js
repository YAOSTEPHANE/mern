"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JSXAttribute = exports.JSXClosingElement = exports.JSXClosingFragment = exports.JSXElement = exports.JSXEmptyExpression = exports.JSXExpressionContainer = exports.JSXFragment = exports.JSXIdentifier = exports.JSXMemberExpression = exports.JSXNamespacedName = exports.JSXOpeningElement = exports.JSXOpeningFragment = exports.JSXSpreadAttribute = exports.JSXSpreadChild = exports.JSXText = class JSXText extends exports.JSXPrinter {
  constructor(...args) {
    super(...args);
    this.print = this.print.bind(this);
  }

  print(node) {
    this.beginNode();
    const raw = this.getPossibleRaw(node);
    if (raw !== undefined) {
      this.token(raw, true);
    } else {
      this.token(node.value, true);
    }
    this.endNode();
  }

});

function JSXAttribute(node) {
  this.print(node.name, node);
  if (node.value) {
    this.tokenChar(61);
    this.print(node.value, node);
  }
}

function JSXIdentifier(node) {
  this.word(node.name);
}

function JSXNamespacedName(node) {
  this.print(node.namespace, node);
  this.tokenChar(58);
  this.print(node.name, node);
}

function JSXMemberExpression(node) {
  this.print(node.object, node);
  this.tokenChar(46);
  this.print(node.property, node);
}

function JSXSpreadAttribute(node) {
  this.tokenChar(123);
  this.token("...");
  this.print(node.argument, node);
  this.tokenChar(125);
}

function JSXExpressionContainer(node) {
  this.tokenChar(123);
  this.print(node.expression, node);
  this.tokenChar(125);
}

function JSXSpreadChild(node) {
  this.tokenChar(123);
  this.token("...");
  this.print(node.expression, node);
  this.tokenChar(125);
}

class JSXPrinter {
  constructor(...args) {
    super(...args);
    this.print = this.print.bind(this);
  }

  print(node, context) {
    this.beginNode();
    this.printNode(node, context);
    this.endNode();
  }

  printInnerComments() {
    this.printComments(this.innerComments);
    this.innerComments = [];
  }

}

exports.JSXPrinter = JSXPrinter;

function JSXElement(node) {
  const open = node.openingElement;
  this.print(open, node);
  if (open.selfClosing) return;
  this.indent();
  for (const child of node.children) {
    this.print(child, node);
  }
  this.dedent();
  this.print(node.closingElement, node);
}

exports.JSXElement = JSXElement;

const spaceSeparator = {
  print(printer) {
    printer.space();
  }
};

function JSXOpeningElement(node) {
  this.tokenChar(60);
  this.print(node.name, node);
  this.print(node.typeParameters, node);
  if (node.attributes.length > 0) {
    this.space();
    this.printJoin(node.attributes, node, {
      separator: spaceSeparator
    });
  }
  if (node.selfClosing) {
    this.space();
    this.token("/>");
  } else {
    this.tokenChar(62);
  }
}

exports.JSXOpeningElement = JSXOpeningElement;

function JSXClosingElement(node) {
  this.token("</");
  this.print(node.name, node);
  this.tokenChar(62);
}

exports.JSXClosingElement = JSXCl
