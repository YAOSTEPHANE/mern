"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const {
  declare,
  types: t
} = require("@babel/helper-plugin-utils");
const {
  isFunction,
  isFunctionExpression,
  isExportDeclaration
} = t;
const {
  assertVersion
} = require("@babel/core");

const _default = exports.default = declare((api) => {
  api.assertVersion(7);

  function transformStatementList(paths) {
    for (const path of paths) {
      if (!t.isFunctionDeclaration(path.node)) continue;
      const func = path.node;
      const declar = t.variableDeclaration("let", [t.variableDeclarator(func.id, t.toExpression(func))]);
      declar._blockHoist = 2;
      func.id = null;
      path.replaceWith(declar);
    }
  }

  return {
    name: "transform-block-scoped-functions",
    visitor: {
      BlockStatement(path) {
        const {
          node,
          parent
        } = path;

        if (isFunction(parent, {
          body: node
        }) || isExportDeclaration(parent)) {
          return;
        }

        transformStatementList(path.get("body").filter(p => p.isStatement()));
      },
      SwitchCase(path) {
        transformStatementList(path.get("consequent").filter(p => p.isStatement()));
      }
    }
  };
});

//# sourceMappingURL=index.js.map
