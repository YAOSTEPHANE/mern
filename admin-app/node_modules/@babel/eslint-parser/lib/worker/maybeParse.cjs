const { createConfigItemSync } = require("@babel/core");
const convert = require("../convert/index.cjs");
const { getVisitorKeys, getTokLabels } = require("./ast-info.cjs");
const extractParserOptionsPlugin = require("./extract-parser-options-plugin.cjs");

let extractParserOptionsConfigItem;
const MULTIPLE_OVERRIDES = /More than one plugin attempted to override parsing/;

module.exports = function maybeParse(code, options = {}) {
  if (!extractParserOptionsConfigItem) {
    extractParserOptionsConfigItem = createConfigItemSync(
      [extractParserOptionsPlugin],
      {
        configItemKey: "plugins",
        configItemName: extractParserOptionsPlugin,
        configDirname: __dirname,
      }
    );
  }

  const { plugins = [] } = options;
  const allPlugins = [...plugins, extractParserOptionsConfigItem];

  try {
    const parserOptions = this.parseSync(code, {
      ...options,
      plugins: allPlugins,
    });

    return {
      parserOptions,
      ast: null,
    };
  } catch (err) {
    if (!MULTIPLE_OVERRIDES.test(err.message)) {
      throw err;
    }
  }

  let ast;
  try {
    ast = this.parseSync(code, {
      ...options,
      plugins: plugins,
    });
  } catch (err) {
    throw convert.error(err);
  }

  return {
    ast: convert.ast(ast, code, getTokLabels(), getVisitorKeys()),
    parserOptions: null,
  };
};

maybeParse.toString = () => `function(code, options = {}) {
  // ... (the function body)
}`;

module.exports.toString = maybeParse.toString;

//# sourceMappingURL=maybeParse.cjs.map
