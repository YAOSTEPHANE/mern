/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */

const KEYS = require("./visitor-keys.json") as { [type: string]: string[] | undefined };

// Types.
const NODE_TYPES = Object.freeze(Object.keys(KEYS) as const);

// Freeze the keys.
for (const type of NODE_TYPES) {
    Object.freeze(KEYS[type]);
}
Object.freeze(KEYS);

// List to ignore keys.
const KEY_BLACKLIST = new Set<string>([
    "parent",
    "leadingComments",
    "trailingComments"
]);

/**
 * Check whether a given key should be used or not.
 * @param {string} key The key to check.
 * @returns {boolean} `true` if the key should be used.
 */
function filterKey([key]: [string]) {
    return !KEY_BLACKLIST.has(key) && key[0] !== "_";
}

//------------------------------------------------------------------------------
// Public interfaces
//------------------------------------------------------------------------------

/**
 * Visitor keys.
 */
export interface VisitorKeys {
    [type: string]: string[] | undefined;
}

/**
 * Get visitor keys of a given node.
 * @param {Object} node The AST node to get keys.
 * @returns {string[]} Visitor keys of the node.
 */
export function getKeys<T extends object>(node: T): (keyof T)[] {
    return Object.keys(node).filter(filterKey) as (keyof T)[];
}

/**
 * Make the union set with `KEYS` and given keys.
 * @param {VisitorKeys} additionalKeys The additional keys.
 * @returns {VisitorKeys} The union set.
 */
export function unionWith(additionalKeys: VisitorKeys): VisitorKeys {
    const retv = Object.fromEntries(NODE_TYPES.map(type => [type, []]));

    for (const type of NODE_TYPES) {
        if (retv.hasOwnProperty(type)) {
            const keys = new Set(additionalKeys[type] || []);

            for (const key of KEYS[type] || []) {
                keys.add(key);
            }

            retv[type] = Object.freeze(Array.from(keys));
        } else {
            retv[type] = Object.freeze(additionalKeys[type] || []);
        }
    }

    return Object.freeze(retv);
}

export { NODE_TYPES, KEYS };

