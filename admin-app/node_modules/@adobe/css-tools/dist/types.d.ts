type Position = {
    start: {
        line: number;
        column: number;
    };
    end: {
        line: number;
        column: number;
    };
    source?: string;
};

type CommonASTProperties = {
    type: CssTypes;
    position?: Position;
    parent?: unknown;
};

type CssNode = CommonASTProperties & {
    [key: string]: unknown;
};

type CssStylesheetAST = CssNode & {
    type: CssTypes.stylesheet;
    stylesheet: {
        source?: string;
        rules: CssAtRuleAST[];
        parsingErrors?: CssParseError[];
    };
};

type CssRuleAST = CssNode & {
    type: CssTypes.rule;
    selectors: string[];
    declarations: (CssDeclarationAST | CssCommentAST)[];
};

type CssDeclarationAST = CssNode & {
    type: CssTypes.declaration;
    property: string;
    value: string;
};

type CssCommentAST = CssNode & {
    type: CssTypes.comment;
    comment: string;
};

// ... other AST node types ...

type CssAtRuleAST =
    | CssRuleAST
    | CssCommentAST
    | CssContainerAST
    | CssCharsetAST
    | CssCustomMediaAST
    | CssDocumentAST
    | CssFontFaceAST
    | CssHostAST
    | CssImportAST
    | CssKeyframesAST
    | CssLayerAST
    | CssMediaAST
    | CssNamespaceAST
    | CssPageAST
    | CssSupportsAST;

type CssAllNodesAST = CssAtRuleAST | CssStylesheetAST | CssDeclarationAST | CssKeyframeAST;

type CssParseError = {
    readonly reason: string;
    readonly filename?: string;
    readonly line: number;
    readonly column: number;
    readonly source: string;
};

declare function visit(node: CssNode, fn: (node: CssNode) => void): void;

declare function toString(node: CssNode): string;

declare function parse(css: string, options?: {
    source?: string | undefined;
    silent?: boolean | undefined;
} | undefined): CssStylesheetAST;

declare function stringify(node: CssStylesheetAST, options?: {
    indent?: string | undefined;
    compress?: boolean | undefined;
} | undefined): string;

declare const _default: {
    parse: (css: string, options?: {
        source?: string | undefined;
        silent?: boolean | undefined;
    } | undefined) => CssStylesheetAST;
    stringify: (node: CssStylesheetAST, options?: {
        indent?: string | undefined;
        compress?: boolean | undefined;
    } | undefined) => string;
    visit: (node: CssNode, fn: (node: CssNode) => void) => void;
    toString: (node: CssNode) => string;
};

export default _default;

//# sourceMappingURL=types.d.ts.map


function visitRule(node: CssRuleAST) {
    console.log(`Rule: ${toString(node)}`);
}

function visit(node: CssNode) {
    // ...
}

const ast = parse('body { color: red; }');
visit(ast, visitRule);


const ast = parse('body { color: red; }');
console.log(toString(ast));
