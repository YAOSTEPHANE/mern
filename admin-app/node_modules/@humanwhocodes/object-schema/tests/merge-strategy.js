{
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.1.3"
  }
}


/**
 * @fileoverview Merge Strategy Tests
 */

const { MergeStrategy } = require("../src/");
const { expect } = require("chai");

describe("MergeStrategy", () => {
  let mergeStrategy;

  beforeEach(() => {
    mergeStrategy = new MergeStrategy();
  });

  describe("overwrite()", () => {
    it.only("should overwrite the first value with the second when the second is defined", () => {
      const result = mergeStrategy.overwrite(1, 2);
      expect(result).to.equal(2);
    });

    it.only("should overwrite the first value with the second when the second is undefined", () => {
      const result = mergeStrategy.overwrite(1, undefined);
      expect(result).to.equal(undefined);
    });
  });

  describe("replace()", () => {
    it.only("should overwrite the first value with the second when the second is defined", () => {
      const result = mergeStrategy.replace(1, 2);
      expect(result).to.equal(2);
    });

    it("should return the first value when the second is undefined", () => {
      const result = mergeStrategy.replace(1, undefined);
      expect(result).to.equal(1);
    });
  });

  describe("assign()", () => {
    it("should merge properties from two objects when called", () => {
      const object1 = { foo: 1, bar: 3 };
      const object2 = { foo: 2 };

      const result = mergeStrategy.assign(object1, object2);
      expect(result).to.deep.equal({
        foo: 2,
        bar: 3
      });
    });

    it("should return the first object when the second is null", () => {
      const object1 = { foo: 1, bar: 3 };
      const result = mergeStrategy.assign(object1, null);
      expect(result).to.deep.equal(object1);
    });

    it("should return the first object when the second is an empty object", () => {
      const object1 = { foo: 1, bar: 3 };
      const result = mergeStrategy.assign(object1, {});
      expect(result).to.deep.equal(object1);
    });
  });
});
