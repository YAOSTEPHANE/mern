{
  "name": "validation-strategy",
  "version": "1.0.0",
  "description": "A validation strategy library",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/**/*.spec.js"
  },
  "devDependencies": {
    "chai": "^4.3.4",
    "mocha": "^9.1.3"
  }
}


const chai = require('chai');
const { ValidationStrategy } = require('../src/');
const { validate } = require('../src/validation-strategy');

const { expect } = chai;

describe('ValidationStrategy', () => {
  describe('boolean', () => {
    context('when the value is a boolean', () => {
      it('should not throw an error', () => {
        expect(() => validate(true, ValidationStrategy.boolean())).to.not.throw();
      });
    });

    context('when the value is not a boolean', () => {
      [null, 'foo', 123, {}, []].forEach(value => {
        it(`should throw an error with message "Expected a Boolean" when the value is ${JSON.stringify(value)}`, () => {
          expect(() => validate(value, ValidationStrategy.boolean())).to.throw('Expected a Boolean');
        });
      });
    });
  });

  describe('number', () => {
    context('when the value is a number', () => {
      it('should not throw an error', () => {
        expect(() => validate(25, ValidationStrategy.number())).to.not.throw();
      });
    });

    context('when the value is not a number', () => {
      [null, 'foo', true, {}, []].forEach(value => {
        it(`should throw an error with message "Expected a number" when the value is ${JSON.stringify(value)}`, () => {
          expect(() => validate(value, ValidationStrategy.number())).to.throw('Expected a number');
        });
      });
    });
  });

  describe('object', () => {
    context('when the value is an object', () => {
      it('should not throw an error', () => {
        expect(() => validate({}, ValidationStrategy.object())).to.not.throw();
      });
    });

    context('when the value is not an object', () => {
      [null, 'foo', 123, true, []].forEach(value => {
        it(`should throw an error with message "Expected an object" when the value is ${JSON.stringify(value)}`, () => {
          expect(() => validate(value, ValidationStrategy.object())).to.throw('Expected an object');
        });
      });
    });
  });

  describe('array', () => {
    context('when the value is an array', () => {
      it('should not throw an error', () => {
        expect(() => validate([], ValidationStrategy.array())).to.not.throw();
      });
    });

    context('when the value is not an array', () => {
      [null, 'foo', 123, true, {}].forEach(value => {
        it(`should throw an error with message "Expected an array" when the value is ${JSON.stringify(value)}`, () => {
          expect(() => validate(value, ValidationStrategy.array())).to.throw('Expected an array');
        });
      });
    });
  });

  describe('object?', () => {
    context('when the value is an object or null', () => {
      it('should not throw an error', () => {
        expect(() => validate({}, ValidationStrategy.object({ nullable: true }))).to.not.throw();
        expect(() => validate(null, ValidationStrategy.object({ nullable: true }))).to.not.throw();
      });
    });

    context('when the value is not an object or null', () => {
      [123, 'foo', true, []].forEach(value => {
        it(`should throw an error with message "Expected an object" when the value is ${JSON.stringify(value)}`, () => {
          expect(() => validate(value, ValidationStrategy.object({ nullable: true }))).to.throw('Expected an object');
        });
      });
    });
  });

  describe('string', () => {
    context('when the value is a string', () => {
      it('should not throw an error', () => {
        expect(() => validate('foo', ValidationStrategy.string())).to.not.throw();
      });
    });

    context('when the value is not a string', () => {
      [null, 123, true, {}, []].forEach(value => {
        it(`should throw an error with message "Expected a string" when the value is ${JSON.stringify(value)}`, () => {
          expect(() => validate(value, ValidationStrategy.string())).to.throw('Expected a string');
        });
      });
    });
  });

  describe('string!', () => {
    context('when the value is a non-empty string', () => {
      it('should not throw an error', () => {

