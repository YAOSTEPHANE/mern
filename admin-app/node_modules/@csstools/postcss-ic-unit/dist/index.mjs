import postcss from "postcss";
import { unit as icUnit } from "@csstools/postcss-progressive-custom-properties";
import valueParser from "postcss-value-parser";

// The plugin function
const icUnitPlugin = (options = {}) => {
  const { preserve = false, enableProgressiveCustomProperties = true } = options;

  // The declaration callback
  return {
    postcssPlugin: "postcss-ic-unit",
    Declaration(decl) {
      // Check if the declaration value contains "ic" unit
      if (!decl.value.toLowerCase().includes("ic")) return;

      // Check if the declaration is inside a "supports" rule with a font-size in "ic" unit
      const hasSupportsRule = checkSupportsRule(decl);
      if (hasSupportsRule) return;

      // Parse the value and convert "ic" units to "em"
      const parsedValue = valueParser(decl.value);
      parsedValue.walk(node => {
        if (!node.type || node.type !== "word") return;
        const unit = valueParser.unit(node.value);
        if (unit && unit.unit.toLowerCase() === "ic") {
          node.value = `${unit.number}em`;
        }
      });

      // Replace the original value with the new value
      const newValue = parsedValue.toString();
      if (newValue !== decl.value) {
        decl.cloneBefore({ value: newValue });
        if (!preserve) decl.remove();
      }
    },
  };
};

// Check if the declaration is inside a "supports" rule with a font-size in "ic" unit
const checkSupportsRule = decl => {
  let parent = decl.parent;
  while (parent) {
    if (parent.type === "atrule" && parent.name.toLowerCase() === "supports") {
      if (/ \(font-size: \d+ic\)/.test(parent.params.toLowerCase())) return true;
    }
    parent = parent.parent
