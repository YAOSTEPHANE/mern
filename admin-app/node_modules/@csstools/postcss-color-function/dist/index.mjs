import e from "@csstools/postcss-progressive-custom-properties";
import r from "postcss-value-parser";

/**
 * Simple matrix (and vector) multiplication
 * Warning: No error handling for incompatible dimensions!
 */
function matrixMultiplication(matrix1, matrix2) {
  const m1 = Array.isArray(matrix1[0]) ? matrix1 : [matrix1];
  const m2 = Array.isArray(matrix2[0]) ? matrix2 : [matrix2].map((e) => [e]);
  const m2Cols = m2[0].length;
  const result = m1.map((row) =>
    m2Cols > 1
      ? m2Cols > 0
        ? m2.map((col) =>
            Array.isArray(row)
              ? row.reduce((acc, val, idx) => acc + val * (col[idx] || 0), 0)
              : col.reduce((acc, val) => acc + val * row, 0)
          )
        : m2[0].map((val) => row.reduce((acc, val2) => acc + val2 * val, 0))
      : row[0]
  );

  return m2Cols === 1 ? result[0] : result;
}

// ... (other functions remain unchanged)

const colorFunctionPlugin = (options = {}) => {
  const { preserve = false, enableProgressiveCustomProperties = true } = options;

  return enableProgressiveCustomProperties && preserve
    ? {
        postcssPlugin: "postcss-color-function",
        plugins: [createColorFunctionPlugin(), handleColorFunctions(preserve)],
      }
    : handleColorFunctions(preserve);
};

colorFunctionPlugin.postcss = true;

export default colorFunctionPlugin;
