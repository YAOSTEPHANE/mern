/**
 * @fileoverview Define common types for input completion.
 * @author Toru Nagashima <https://github.com/mysticatea>
 */

import {
  EcmaFeatures,
  ParserOptions,
  GlobalConf,
  SeverityConf,
  RuleConf,
  OverrideConfigData,
  ParseResult,
  Parser,
  Environment,
  LintMessage,
  SuggestionResult,
  Processor,
  RuleMetaDocs,
  RuleMeta,
  Rule,
  Plugin,
} from 'eslint';

/**
 * Information of deprecated rules.
 */
export interface DeprecatedRuleInfo {
  ruleId: string;
  replacedBy: string[];
}

/**
 * The environment settings.
 */
export interface CustomEnv extends Record<string, boolean> {}

/**
 * The global variable settings.
 */
export interface CustomGlobals extends Record<string, GlobalConf> {}

/**
 * The glob patterns for target files.
 */
export type CustomFiles = string | string[];

/**
 * The glob patterns that ignore to lint.
 */
export type CustomIgnorePatterns = string | string[];

/**
 * The override settings per kind of files.
 */
export interface CustomOverrides extends OverrideConfigData {
  files: CustomFiles;
  excludedFiles?: CustomFiles;
}

/**
 * The parser options.
 */
export interface CustomParserOptions extends ParserOptions {
  impliedStrict?: boolean;
}

/**
 * The shared settings.
 */
export interface CustomSettings {
  [settingId: string]: any;
}

/**
 * The environment settings for a plugin.
 */
export interface CustomEnvironment extends Environment {
  globals?: CustomGlobals;
  parserOptions?: CustomParserOptions;
}

/**
 * The configuration data for a plugin.
 */
export interface CustomConfigData extends ConfigData {
  env?: CustomEnv;
  globals?: CustomGlobals;
  parserOptions?: CustomParserOptions;
  rules?: Record<string, RuleConf>;
}

/**
 * The configuration data for a rule.
 */
export interface CustomRuleConfigData extends Rule {
  meta: RuleMeta & {
    docs: RuleMetaDocs & {
      category: string;
      description: string;
      recommended?: boolean;
      url: string;
    };
    deprecated?: boolean;
    replacedBy?: string[];
    fixable?: 'code' | 'whitespace';
    messages?: Record<string, string>;
    schema?: any;
    type: 'problem' | 'suggestion' | 'layout';
  };
}

/**
 * The configuration data for a processor.
 */
export interface CustomProcessorConfigData extends Processor {
  preprocess?: Processor['preprocess'];
  postprocess?: Processor['postprocess'];
  supportsAutofix?: boolean;
}

/**
 * The configuration data for a plugin.
 */
export interface CustomPluginConfigData extends Plugin {
  configs?: Record<string, CustomConfigData>;
  environments?: Record<string, CustomEnvironment>;
  processors?: Record<string, CustomProcessorConfigData>;
  rules?: Record<string, CustomRuleConfigData>;
}

/**
 * The configuration data for the linter.
 */
export interface CustomConfig extends ConfigData {
  env?: CustomEnv;
  extends?: string | string[];
  globals?: CustomGlobals;
  ignorePatterns?: CustomIgnorePatterns;
  noInlineConfig?: boolean;
  overrides?: CustomOverrides[];
  parser?: string;
  parserOptions?: CustomParserOptions;
  plugins?: string[];
  processor?: string;
  reportUnusedDisableDirectives?: boolean;
  root?: boolean;
  rules?: Record<string, RuleConf>;
  settings?: CustomSettings;
}

/**
 * The result of parsing a source code.
 */
export interface CustomParseResult extends ParseResult {
  visitorKeys?: Record<string, string[]>;
}

/**
 * The result of linting a source code.
 */
export interface CustomLintResult {
  filePath: string;
  messages: LintMessage[];
  errorCount: number;
  fatalErrorCount: number;
  warningCount: number;
  fixableErrorCount: number;
  output?: string;
}

/**
 * The result of suggesting fixes for a lint message.
 */
export interface CustomSuggestionResult {
  desc: string;
  messageId?: string;
  fix: { text: string; range: [number, number] } | null;
}

/**
 * The result of formatting a lint message.
 */
export interface CustomFormattedMessage {
  column: number;
  endColumn?: number;
  endLine?: number;
  fatal: boolean;
  fix?: { range: [number, number]; text: string };
  line: number;
  message: string;
  ruleId?: string | null;
  severity: 0 | 1 | 2;
  suggestions?: CustomSuggestionResult[];
}

/**
 * The result of formatting lint messages.
 */
export interface CustomFormattedMessages {
  filePath: string;
  messages: CustomFormattedMessage[];
  errorCount: number;
  fatalErrorCount: number;
  warningCount: number;
  fixableErrorCount: number;
  output?: string;
}

/**
 * The result of linting a source code with suggestions.
 */
export interface CustomLintWithSuggestionsResult {
  filePath: string;
  messages: (LintMessage & { suggestions?: CustomSuggestionResult[] })[];
  errorCount: number;
  fatalErrorCount: number;
  warningCount: number;
  fixableErrorCount: number;
  output?: string;
}

/**
 * The result of formatting a lint message with suggestions.
 */
export interface CustomFormattedMessageWithSuggestions {
  column: number;
  endColumn?: number;
  endLine?: number
