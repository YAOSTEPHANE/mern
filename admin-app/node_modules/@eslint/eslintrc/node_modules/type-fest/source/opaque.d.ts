/**
 * Create an opaque type, which hides its internal details from the public, and can only be created by being used explicitly.
 * 
 * The generic type parameter `Type` can be any value. The second type parameter `Token` is optional and defaults to `unknown`,
 * and is used to distinguish between different opaque types with the same underlying type.
 *
 * @example
 * ```typescript
 * import { Opaque } from './opaque';
 *
 * type AccountNumber = Opaque<number, 'AccountNumber'>;
 * type AccountBalance = Opaque<number, 'AccountBalance'>;
 *
 * const createAccountNumber = (): AccountNumber => 2 as AccountNumber;
 * const getMoneyForAccount = (accountNumber: AccountNumber): AccountBalance => 4 as AccountBalance;
 *
 * getMoneyForAccount(createAccountNumber()); // compiles
 * getMoneyForAccount(2); // doesn't compile
 * ```
 */
export type Opaque<Type, Token = unknown> = Type & { readonly __opaque__: Token };
