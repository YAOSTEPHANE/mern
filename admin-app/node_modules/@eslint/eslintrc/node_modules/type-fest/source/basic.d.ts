/// <reference lib="esnext"/>

/**
Matches any primitive value.
*/
export type Primitive = null | undefined | string | number | boolean | symbol | bigint;

/**
Matches a class constructor.
*/
export type Class<T = unknown, Arguments extends any[] = any[]> = new(...arguments_: Arguments) => T;

/**
Matches any typed array.
*/
export type TypedArray =
    Int8Array | Uint8Array | Uint8ClampedArray |
    Int16Array | Uint16Array | Int32Array | Uint32Array |
    Float32Array | Float64Array | BigInt64Array | BigUint64Array;

/**
Matches a JSON object.
This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from.
*/
export type JsonObject = { [Key in string]?: JsonValue };

/**
Matches a JSON array.
*/
export type JsonArray = Array<JsonValue>;

/**
Matches any valid JSON value.
*/
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray;

declare global {
    interface SymbolConstructor {
        readonly observable: symbol;
    }
}

/**
Matches a value that is like an Observable.
*/
export interface ObservableLike {
    subscribe(observer: (value: unknown) => void): void;
    [Symbol.observable](): ObservableLike;
}

/**
Matches a value that is either an Observable or a Promise.
*/
export type ObservableOrPromise<T> = ObservableLike & { then: Promise<T>['then'] };
