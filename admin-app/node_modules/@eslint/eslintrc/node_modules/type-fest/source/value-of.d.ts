/**
 * Gets the value of a property from an object.
 *
 * @template TObject - The type of the object.
 * @template TKey - The type of the key.
 * @param object - The object to get the value from.
 * @param key - The key to get the value of.
 * @returns The value of the specified property.
 *
 * @example
 * import {getValue} from './utils';
 *
 * const data = {
 *   foo: 1,
 *   bar: 2,
 *   biz: 3,
 * };
 *
 * getValue(data, 'foo'); // 1
 * getValue(data, 'baz'); // undefined
 */
export function getValue<TObject, TKey extends keyof TObject>(object: TObject, key: TKey): TObject[TKey] {
  return object[key];
}

/**
 * Gets the union of the values of the given object, optionally specifying which keys to get the values from.
 *
 * @template TObject - The type of the object.
 * @template TKeys - The type of the keys to get the values from. Defaults to all keys of the object.
 * @param object - The object to get the values from.
 * @param keys - The keys to get the values from.
 * @returns The union of the values of the specified properties.
 *
 * @example
 * import {getValues} from './utils';
 *
 * const data = {
 *   foo: 1,
 *   bar: 2,
 *   biz: 3,
 * };
 *
 * getValues(data); // 1 | 2 | 3
 * getValues(data, ['foo', 'bar']); // 1 | 2
 */
export function getValues<TObject, TKeys extends keyof TObject = keyof TObject>(object: TObject, keys?: TKeys[]): TObject[TKeys][] {
  return keys ? keys.map(key => object[key]) : Object.values(object);
}


