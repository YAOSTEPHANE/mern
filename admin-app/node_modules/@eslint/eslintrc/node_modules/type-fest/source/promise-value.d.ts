/**
 * Returns the type that is wrapped inside a `Promise` type.
 * If the type is a nested Promise, it is unwrapped recursively until a non-Promise type is obtained.
 * If the type is not a `Promise`, the type itself is returned.
 *
 * @example
 * ```
 * import { PromiseValue } from './path/to/PromiseValue';
 *
 * type AsyncData = Promise<string>;
 * let asyncData: AsyncData = Promise.resolve('ABC');
 *
 * type Data = PromiseValue<AsyncData>; // string
 * let data: Data = await asyncData;
 *
 * // Here's an example that shows how this type reacts to non-Promise types.
 * type SyncData = PromiseValue<string>;
 * let syncData: SyncData = getSyncData();
 *
 * // Here's an example that shows how this type reacts to recursive Promise types.
 * type RecursiveAsyncData = Promise<Promise<string>>;
 * let recursiveAsyncData: PromiseValue<RecursiveAsyncData>;
 * recursiveAsyncData = Promise.resolve(Promise.resolve('ABC'));
 * type RecursiveData = PromiseValue<RecursiveAsyncData>; // string
 * let recursiveData: RecursiveData = await recursiveAsyncData;
 * ```
 */
type PromiseValueHelper<T, Unwrapped = T> =
  T extends Promise<infer U> ? PromiseValueHelper<U> : Unwrapped;

export type PromiseValue<T> = PromiseValueHelper<T>;
