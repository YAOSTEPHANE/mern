'use strict';

const Type = require('../type');

const YAML_DATE_REGEXP = /^([0-9]{4})-([0-9]{2})-([0-9]{2})$/;
const YAML_TIMESTAMP_REGEXP = /^([0-9]{4})-([0-9]{2})-([0-9]{2})(?:T| )([0-9]{2}):([0-9]{2}):([0-9]{2})(?:\.([0-9]*))?(?:Z| ([-+])([0-9]{2})(?::([0-9]{2}))?)?$/;

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.test(data)) return true;
  if (YAML_TIMESTAMP_REGEXP.test(data)) return true;
  return false;
}

function constructYamlTimestamp(data) {
  let match, year, month, day, hour, minute, second, fraction = 0,
    delta = null, tz_hour, tz_minute, date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) {
    throw new Error('Date resolve error: invalid date format');
  }

  year = parseInt(match[1], 10);
  month = parseInt(match[2], 10) - 1; // JS month starts with 0
  day = parseInt(match[3], 10);

  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }

  hour = parseInt(match[4], 10);
  minute = parseInt(match[5], 10);
  second = parseInt(match[6], 10);

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) { // milli-seconds
      fraction += '0';
    }
    fraction = parseFloat(`0.${fraction}`);
  }

  if (match[8]) {
    const tz_sign = match[9];
    tz_hour = parseInt(match[10], 10);
    tz_minute = parseInt(match[11] || 0, 10);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (tz_sign === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction * 1000));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

const YamlTimestampType = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});

// Add some tests
const testCases = [
  { input: '2022-03-01', expected: new Date('2022-03-01T00:00:00.000Z') },
  { input: '2022-03-01T12:34:56.789Z', expected: new Date('2022-03-01T12:34:56.789Z')
