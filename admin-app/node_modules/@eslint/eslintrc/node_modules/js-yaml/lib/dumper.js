'use strict';

const common = require('./common');
const YAMLException = require('./exception');
const DEFAULT_SCHEMA = require('./schema/default');

const CHAR_BOM = 0xFEFF;
const CHAR_TAB = 0x09; /* Tab */
const CHAR_LINE_FEED = 0x0A; /* LF */
const CHAR_CARRIAGE_RETURN = 0x0D; /* CR */
const CHAR_SPACE = 0x20; /* Space */
const CHAR_EXCLAMATION = 0x21; /* ! */
const CHAR_DOUBLE_QUOTE = 0x22; /* " */
const CHAR_SHARP = 0x23; /* # */
const CHAR_PERCENT = 0x25; /* % */
const CHAR_AMPERSAND = 0x26; /* & */
const CHAR_SINGLE_QUOTE = 0x27; /* ' */
const CHAR_ASTERISK = 0x2A; /* * */
const CHAR_COMMA = 0x2C; /* , */
const CHAR_MINUS = 0x2D; /* - */
const CHAR_COLON = 0x3A; /* : */
const CHAR_EQUALS = 0x3D; /* = */
const CHAR_GREATER_THAN = 0x3E; /* > */
const CHAR_QUESTION = 0x3F; /* ? */
const CHAR_COMMERCIAL_AT = 0x40; /* @ */
const CHAR_LEFT_SQUARE_BRACKET = 0x5B; /* [ */
const CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
const CHAR_GRAVE_ACCENT = 0x60; /* ` */
const CHAR_LEFT_CURLY_BRACKET = 0x7B; /* { */
const CHAR_VERTICAL_LINE = 0x7C; /* | */
const CHAR_RIGHT_CURLY_BRACKET = 0x7D; /* } */

const ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00] = '\\0';
ESCAPE_SEQUENCES[0x07] = '\\a';
ESCAPE_SEQUENCES[0x08] = '\\b';
ESCAPE_SEQUENCES[0x09] = '\\t';
ESCAPE_SEQUENCES[0x0A] = '\\n';
ESCAPE_SEQUENCES[0x0B] = '\\v';
ESCAPE_SEQUENCES[0x0C] = '\\f';
ESCAPE_SEQUENCES[0x0D] = '\\r';
ESCAPE_SEQUENCES[0x1B] = '\\e';
ESCAPE_SEQUENCES[0x22] = '\\"';
ESCAPE_SEQUENCES[0x5C] = '\\\\';
ESCAPE_SEQUENCES[0x85] = '\\N';
ESCAPE_SEQUENCES[0xA0] = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

const DEPRECATED_BOOLEANS_SYNTAX = [
  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];

const DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;

const compileStyleMap = schema => map => {
  if (map === null) return {};

  const result = {};
  const keys = Object.keys(map);

  for (let index = 0, length = keys.length; index < length; index += 1) {
    const tag = keys[index];
    const style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = `tag:yaml.org,2002:${tag.slice(2)}`;
    }
    const type = schema.compiledTypeMap['fallback'][tag];

    if (type && type.styleAliases.hasOwnProperty(style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
};

const encodeHex = character => {
  const string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    return `\\x${common.repeat('0', 2 - string.length)}${string}`;
  } else if (character <= 0xFFFF) {
    return `\\u${common.repeat('0', 4 - string.length)}${string}`;
  } else if (character <= 
