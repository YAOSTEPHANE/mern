export interface Options {
  /**
   * Count ambiguous width characters as having narrow width (count of 1) instead of wide width (count of 2).
   * @default true
   */
  ambiguousIsNarrow?: boolean;
}

/**
 * Get the visual width of a string - the number of columns required to display it.
 * Some Unicode characters are fullwidth and use double the normal width. ANSI escape codes are stripped and don't affect the width.
 * @example
 * import stringWidth from 'string-width';
 *
 * stringWidth('a'); // 1
 * stringWidth('古'); // 2
 * stringWidth('\u001B[1m古\u001B[22m'); // 2
 */
export const stringWidth = (string: string, options: Options = {}) => {
  const { ambiguousIsNarrow = true } = options;
  const width = string.length;
  const match = string.match(/[\uFF01-\uFF5E\u30A0-\u30FF\u3040-\u309F\u2000-\u206F]/g);

  if (!match) {
    return width;
  }

  const fullWidthChars = match.filter((char) => char.codePointAt(0)! > 0xFF60);
  const ambiguousChars = match.filter(
    (char) =>
      char.codePointAt(0)! >= 0x2000 && char.codePointAt(0)! <= 0x206F &&
      (!ambiguousIsNarrow || !fullWidthChars.includes(char))
  );

  return width - fullWidthChars.length + ambiguousChars.length;
};

export default stringWidth;
