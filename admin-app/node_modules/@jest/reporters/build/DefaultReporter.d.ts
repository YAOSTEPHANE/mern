/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { AggregatedResult, TestCaseResult, TestResult } from '@jest/test-result';
import { Config } from '@jest/types';
import BaseReporter from './BaseReporter';
import { ReporterOnStartOptions, Test } from './types';

class DefaultReporter extends BaseReporter {
  private _clear: () => void;
  private _err: NodeJS.WriteStream;
  protected _globalConfig: Config.GlobalConfig;
  private _out: NodeJS.WriteStream;
  private _status: string;
  private _bufferedOutput: string[];

  static readonly filename = 'DefaultReporter';

  constructor(globalConfig: Config.GlobalConfig) {
    super(globalConfig);
    this._globalConfig = globalConfig;
    this._bufferedOutput = [];
    this.__wrapStdio(process.stdout);
    this.__wrapStdio(process.stderr);
  }

  protected __wrapStdio(stream: NodeJS.WritableStream | NodeJS.WriteStream): void {
    if (stream && typeof stream.write === 'function') {
      const originalWrite = stream.write;
      stream.write = (data: string, encoding?: string, callback?: (error?: Error | null) => void) => {
        this._bufferedOutput.push(data);
        originalWrite.call(stream, data, encoding, callback);
      };
      stream.clear = () => {
        this._bufferedOutput = [];
      };
    }
  }

  forceFlushBufferedOutput(): void {
    for (const output of this._bufferedOutput) {
      process.stdout.write(output);
    }
    this._bufferedOutput = [];
  }

  protected __clearStatus(): void {
    this._status = '';
  }

  protected __printStatus(): void {
    if (this._status) {
      process.stdout.write(this._status);
    }
  }

  onRunStart(aggregatedResults: AggregatedResult, options: ReporterOnStartOptions): void {
    this.__clearStatus();
    // Add any necessary logic here
  }

  onTestStart(test: Test): void {
    // Add any necessary logic here
  }

  onTestCaseResult(test: Test, testCaseResult: TestCaseResult): void {
    // Add any necessary logic here
  }

  onRunComplete(): void {
    this.__printStatus();
    this.forceFlushBufferedOutput();

