'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = getResultHeader;

const chalk = require('chalk');
const terminalLink = require('terminal-link');
const { formatTestPath, printDisplayName } = require('./utils');
const { formatTime } = require('jest-util');

const LONG_TEST_COLOR = chalk.reset.bold.bgRed;
const FAIL_TEXT = 'FAIL';
const PASS_TEXT = 'PASS';
const FAIL = chalk.supportsColor
  ? chalk.reset.inverse.bold.red(` ${FAIL_TEXT} `)
  : FAIL_TEXT;
const PASS = chalk.supportsColor
  ? chalk.reset.inverse.bold.green(` ${PASS_TEXT} `)
  : PASS_TEXT;

function getResultHeader(result, globalConfig, projectConfig) {
  const testPath = result.testFilePath;
  const formattedTestPath = formatTestPath(
    projectConfig || globalConfig,
    testPath
  );
  const fileLink = terminalLink(formattedTestPath, `file://${testPath}`, {
    fallback: () => formattedTestPath
  });
  const status = result.numFailingTests > 0 || result.testExecError ? FAIL : PASS;
  const testDetail = [];

  if (result.perfStats && result.perfStats.slow) {
    const runTime = result.perfStats.runtime / 1000;
    testDetail.push(LONG_TEST_COLOR(formatTime(runTime, 0)));
  }

  if (result.memoryUsage) {
    const toMB = bytes => Math.floor(bytes / 1024 / 1024);
    testDetail.push(`${toMB(result.memoryUsage)} MB heap size`);
  }

  const projectDisplayName = projectConfig && projectConfig.displayName
    ? printDisplayName(projectConfig) + ' '
    : '';

  return `${status} ${projectDisplayName}${fileLink}${testDetail.length ? ` (${testDetail.join(', ')})` : ''}`;
}

module.exports = exports.default;
