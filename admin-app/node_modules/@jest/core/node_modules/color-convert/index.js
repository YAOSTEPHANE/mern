const conversions = require('./conversions');
const route = require('./route');

const convert = {};

if (!conversions || !route) {
  throw new Error('conversions and route modules are required');
}

const models = Object.keys(conversions);

function isFunction(fn) {
  return typeof fn === 'function';
}

function wrapRaw(fn) {
  if (!isFunction(fn)) {
    throw new Error('fn argument must be a function');
  }

  const wrappedFn = function (...args) {
    const arg0 = args[0];

    if (arg0 === undefined || arg0 === null) {
      return arg0;
    }

    if (Array.isArray(arg0) && arg0.length > 1) {
      args = arg0;
    }

    return fn(args);
  };

  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

function wrapRounded(fn) {
  if (!isFunction(fn)) {
    throw new Error('fn argument must be a function');
  }

  const wrappedFn = function (...args) {
    const arg0 = args[0];

    if (arg0 === undefined || arg0 === null) {
      return arg0;
    }

    if (Array.isArray(arg0) && arg0.length > 1) {
      args = arg0;
    }

    const result = fn(args);

    if (Array.isArray(result)) {
      for (let i = 0; i < result.length; i++) {
        result[i] = Math.round(result[i]);
      }
    }

    return result;
  };

  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

if (!Array.isArray(models)) {
  throw new Error
