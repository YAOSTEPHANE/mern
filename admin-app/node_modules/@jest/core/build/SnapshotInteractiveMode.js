'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

const { ARROW, CLEAR } = require('jest-util').specialChars;
const ansiEscapes = require('ansi-escapes');
const chalk = require('chalk');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

class SnapshotInteractiveMode {
  constructor(pipe) {
    _defineProperty(this, '_pipe', void 0);

    _defineProperty(this, '_isActive', void 0);

    _defineProperty(this, '_updateTestRunnerConfig', void 0);

    _defineProperty(this, '_testAssertions', void 0);

    _defineProperty(this, '_countPaths', void 0);

    _defineProperty(this, '_skippedNum', void 0);

    this._pipe = pipe;
    this._isActive = false;
    this._skippedNum = 0;
  }

  isActive() {
    return this._isActive;
  }

  getSkippedNum() {
    return this._skippedNum;
  }

  _clearTestSummary() {
    this._pipe.write(ansiEscapes.cursorUp(6));
    this._pipe.write(ansiEscapes.eraseDown);
  }

  _drawUIProgress() {
    this._clearTestSummary();

    const numPass = this._countPaths - this._testAssertions.length;
    const numRemaining = this._countPaths - numPass - this._skippedNum;

    let stats = chalk.bold.dim(
      `${jestUtil.pluralize('snapshot', numRemaining)} remaining`
    );

    if (numPass) {
      stats += `, ${chalk.bold.green(
        `${jestUtil.pluralize('snapshot', numPass)} updated`
      )}`;
    }

    if (this._skippedNum) {
      stats += `, ${chalk.bold.yellow(
        `${jestUtil.pluralize('snapshot', this._skippedNum)} skipped`
      )}`;
    }

    const messages = [
      `\n${chalk.bold('Interactive Snapshot Progress')}`,
      `${ARROW} ${stats}`,
      `\n${chalk.bold('Watch Usage')}`,
      `${chalk.dim(ARROW + 'Press ')}u ${chalk.dim('to update failing snapshots for this test.')}`,
      `${chalk.dim(ARROW + 'Press ')}s ${chalk.dim('to skip the current test.')}`,
      `${chalk.dim(ARROW + 'Press ')}q ${chalk.dim('to quit Interactive Snapshot Mode.')}`,
      `${chalk.dim(ARROW + 'Press ')}Enter ${chalk.dim('to trigger a test run.')}`
    ];

    this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
  }

  _drawUIDoneWithSkipped() {
    this._pipe.write(CLEAR);

    const numPass = this._countPaths - this._testAssertions.length;

    let stats = chalk.bold.dim(
      `${jestUtil.pluralize('snapshot', this._countPaths)} reviewed`
    );

    if (numPass) {
      stats += `, ${chalk.bold.green(
        `${jestUtil.pluralize('snapshot', numPass)} updated`
      )}`;
    }

    if (this._skippedNum) {
      stats += `, ${chalk.bold.yellow(
        `${jestUtil.pluralize('snapshot', this._skippedNum)} skipped`
      )}`;
    }

    const messages = [
      `\n${chalk.bold('Interactive Snapshot Result')}`,
      `${ARROW} ${stats}`,
      `\n${chalk.bold('Watch Usage')}`,
      `${chalk.dim(ARROW + 'Press ')}r ${chalk.dim('to restart Interactive Snapshot Mode.')}`,
      `${chalk.dim(ARROW + 'Press ')}q ${chalk.dim('to quit Interactive Snapshot Mode.')}`
    ];

    this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
  }

  _drawUIDone() {
    this._pipe.write(CLEAR);

    const numPass = this._countPaths - this._testAssertions.length;

    let stats = chalk.bold.dim(
      `${jestUtil.pluralize('snapshot', this._countPaths)} reviewed`
    );

    if (numPass) {
      stats += `, ${chalk.bold.green(
        `${jestUtil.pluralize('snapshot', numPass)} updated`
      )}`;
    }

    const messages = [
      `\n${chalk.bold('Interactive Snapshot Result')}`,
      `${ARROW} ${stats}`,
      `\n${chalk.bold('Watch Usage')}`,
      `${chalk.dim(ARROW + 'Press ')}Enter ${chalk.dim('to return to watch mode.')}`
    ];
