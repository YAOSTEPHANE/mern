'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = runGlobalHook;

function _transform() {
  const { createScriptTransformer } = require('@jest/transform');

  _transform = function () {
    return { createScriptTransformer: createScriptTransformer };
  };

  return { createScriptTransformer: createScriptTransformer };
}

function _prettyFormat() {
  const prettyFormat = require('pretty-format');

  _prettyFormat = function () {
    return prettyFormat;
  };

  return prettyFormat;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
async function runGlobalHook({allTests, globalConfig, moduleName}) {
  const globalModulePaths = new Set(
    allTests.map(test => test.context.config[moduleName])
  );

  if (globalConfig[moduleName]) {
    globalModulePaths.add(globalConfig[moduleName]);
  }

  if (globalModulePaths.size > 0) {
    for (const modulePath of globalModulePaths) {
      if (!modulePath) {
        continue;
      }

      const correctConfig = allTests.find(
        t => t.context.config[moduleName] === modulePath
      );
      const projectConfig = correctConfig
        ? correctConfig.context.config // Fallback to first config
        : allTests[0].context.config;
      const transformer = await _transform().createScriptTransformer(
        projectConfig
      );

      try {
        await transformer.requireAndTranspileModule(
          modulePath,
          async globalModule => {
            if (typeof globalModule !== 'function') {
              throw new TypeError(
                `${moduleName} file must export a function at ${modulePath}`
              );
            }

            await globalModule(globalConfig);
          }
        );
      } catch (error) {
        if (Error.isNativeError(error)) {
          error.message = `Jest: Got error running ${moduleName} - ${modulePath}, reason: ${error.message}`;
          throw error;
        }

        throw new Error(
          `Jest: Got error running ${moduleName} - ${modulePath}, reason: ${prettyFormat(error, {
            maxDepth: 3
          })}`
        );
      }
    }
  }
}

