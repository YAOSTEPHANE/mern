import type { MapSource, OriginalSource } from './source-map-tree';
import type { SourceMapInput, SourceMapLoader, SourceMapConsumer } from './types';

/**
 * Recursively builds a tree structure out of sourcemap files, with each node
 * being either an `OriginalSource` "leaf" or a `MapSource` composed of
 * `OriginalSource`s and `MapSource`s.
 *
 * Every sourcemap is composed of a collection of source files and mappings
 * into locations of those source files. When we generate a `MapSource` for
 * the sourcemap, we attempt to load each source file's own sourcemap. If it
 * does not have an associated sourcemap, it is considered an original,
 * unmodified source file.
 */
export default async function buildSourceMapTree(
  input: SourceMapInput | SourceMapInput[],
  loader: SourceMapLoader,
): Promise<MapSource> {
  if (Array.isArray(input)) {
    return Promise.all(input.map((i) => buildSourceMapTree(i, loader))).then((trees) => ({
      type: 'MapSource',
      children: trees,
    }));
  }

  const consumer = await loader(input);
  const sources: OriginalSource[] = [];

  for (const entry of consumer.sources) {
    try {
      const sourceInput = await loader(entry);
      const sourceConsumer = await loader(sourceInput);
      sources.push({
        type: 'OriginalSource',
        name: entry,
        tree: buildSourceMapTree(sourceInput, loader),
      });
    } catch (e) {
      sources.push({
        type: 'OriginalSource',
        name: entry,
        tree: null,
      });
    }
  }

  return {
    type: 'MapSource',
    children: sources,
  };
}
