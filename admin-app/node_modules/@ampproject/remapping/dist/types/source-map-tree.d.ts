import { GenMapping } from '@jridgewell/gen-mapping';
import type { TraceMap } from '@jridgewell/trace-mapping';

export declare type SourceMapSegmentObject = {
  column: number;
  line: number;
  name: string;
  source: string;
  content: string | null;
};

export declare type OriginalSource = {
  map: null;
  sources: Sources[];
  source: string;
  content?: string | null;
};

export declare type MapSource = {
  map: TraceMap;
  sources: Sources[];
  source: string;
  content: null;
};

export declare type Sources = OriginalSource | MapSource;

/**
 * MapSource represents a single sourcemap, with the ability to trace mappings into its child nodes
 * (which may themselves be SourceMapTrees).
 */
export function MapSource(map: TraceMap, sources: Sources[]): MapSource {
  return { map, sources, source: '', content: null };
}

/**
 * A "leaf" node in the sourcemap tree, representing an original, unmodified source file. Recursive
 * segment tracing ends at the `OriginalSource`.
 */
export function OriginalSource(source: string, content?: string | null): OriginalSource {
  if (content === undefined) {
    content = null;
  }
  return { map: null, sources: [], source, content };
}

type HasTraceMap = {
  map: TraceMap;
};

type NoTraceMap = {
  map: null;
};

function isHasTraceMap(source: Sources): source is HasTraceMap {
  return (source as HasTraceMap).map !== null;
}

function isNoTraceMap(source: Sources): source is NoTraceMap {
  return (source as NoTraceMap).map === null;
}

/**
 * traceMappings is only called on the root level SourceMapTree, and begins the process of
 * resolving each mapping in terms of the original source files.
 */
export function traceMappings(tree: MapSource): GenMapping {
  // implementation here
}

/**
 * originalPositionFor is only called on children SourceMapTrees. It recurses down into its own
 * child SourceMapTrees, until we find the
