{"ast":null,"code":"import { cartConstants } from './constants';\nimport store from '../store';\nimport axios from '../helpers/axios';\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstant.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n      if (res.status === 200) {\n        const {\n          cartItems\n        } = res.data;\n        console.log({\n          getCartItems: cartItems\n        });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: {\n              cartItems\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cartItems\n    } = store.getState().cart;\n    //console.log('action::products', products);\n    // const product = action.payload.product;\n    // const products = actions.payload.products;\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = {\n      ...product,\n      qty\n    };\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n    dispatch({\n      type: cartConstants.ADD_TO_CART,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\nexport const updateCart = () => {\n  return async dispatch => {\n    const cartItems = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : null;\n    if (cartItems) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART,\n        payload: {\n          cartItems\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["cartConstants","store","axios","getCartItems","dispatch","type","cartConstant","ADD_TO_CART_REQUEST","res","post","status","cartItems","data","console","log","ADD_TO_CART_SUCCESS","payload","error","addToCart","product","newQty","getState","cart","qty","_id","parseInt","localStorage","setItem","JSON","stringify","ADD_TO_CART","updateCart","getItem","parse"],"sources":["C:/Users/kouas/Desktop/mern-batirem/batirem-frontend/src/actions/cart.action.js"],"sourcesContent":["import { cartConstants } from './constants';\r\nimport store from '../store';\r\nimport axios from '../helpers/axios';\r\n\r\n\r\n\r\n\r\nconst getCartItems = () => {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch({type: cartConstant.ADD_TO_CART_REQUEST});\r\n            const res = await axios.post(`/user/getCartItems`);\r\n            if(res.status === 200){\r\n                const {cartItems} = res.data;\r\n                console.log({getCartItems: cartItems})\r\n                if(cartItems){\r\n                    dispatch({\r\n                        type: cartConstants.ADD_TO_CART_SUCCESS,\r\n                        payload: {cartItems}\r\n                    });\r\n                }\r\n            }\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\n\r\nexport const addToCart = (product, newQty=1) => {\r\n    return async dispatch => {\r\n        const {cartItems} = store.getState().cart;\r\n        //console.log('action::products', products);\r\n        // const product = action.payload.product;\r\n        // const products = actions.payload.products;\r\n         const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\r\n            cartItems[product._id] = {\r\n                ...product,\r\n                qty\r\n            };\r\n            localStorage.setItem('cart', JSON.stringify(cartItems));\r\n\r\n            dispatch({\r\n                type: cartConstants.ADD_TO_CART,\r\n                payload: {cartItems}\r\n            });\r\n    }\r\n}\r\n\r\nexport const updateCart = () => {\r\n    return async dispatch => {\r\n        const cartItems = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : null;\r\n\r\n        if(cartItems){\r\n            dispatch({\r\n                type: cartConstants.ADD_TO_CART,\r\n                payload: {cartItems}\r\n            });\r\n        }\r\n    }\r\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,aAAa;AAC3C,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,KAAK,MAAM,kBAAkB;AAKpC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB,OAAO,MAAMC,QAAQ,IAAI;IACrB,IAAI;MACAA,QAAQ,CAAC;QAACC,IAAI,EAAEC,YAAY,CAACC;MAAmB,CAAC,CAAC;MAClD,MAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAE,oBAAmB,CAAC;MAClD,IAAGD,GAAG,CAACE,MAAM,KAAK,GAAG,EAAC;QAClB,MAAM;UAACC;QAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;QAC5BC,OAAO,CAACC,GAAG,CAAC;UAACX,YAAY,EAAEQ;QAAS,CAAC,CAAC;QACtC,IAAGA,SAAS,EAAC;UACTP,QAAQ,CAAC;YACLC,IAAI,EAAEL,aAAa,CAACe,mBAAmB;YACvCC,OAAO,EAAE;cAACL;YAAS;UACvB,CAAC,CAAC;QACN;MACJ;IACJ,CAAC,QAAMM,KAAK,EAAC;MACTJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACtB;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGA,CAACC,OAAO,EAAEC,MAAM,GAAC,CAAC,KAAK;EAC5C,OAAO,MAAMhB,QAAQ,IAAI;IACrB,MAAM;MAACO;IAAS,CAAC,GAAGV,KAAK,CAACoB,QAAQ,CAAC,CAAC,CAACC,IAAI;IACzC;IACA;IACA;IACC,MAAMC,GAAG,GAAGZ,SAAS,CAACQ,OAAO,CAACK,GAAG,CAAC,GAAGC,QAAQ,CAACd,SAAS,CAACQ,OAAO,CAACK,GAAG,CAAC,CAACD,GAAG,GAAGH,MAAM,CAAC,GAAG,CAAC;IACnFT,SAAS,CAACQ,OAAO,CAACK,GAAG,CAAC,GAAG;MACrB,GAAGL,OAAO;MACVI;IACJ,CAAC;IACDG,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAClB,SAAS,CAAC,CAAC;IAEvDP,QAAQ,CAAC;MACLC,IAAI,EAAEL,aAAa,CAAC8B,WAAW;MAC/Bd,OAAO,EAAE;QAACL;MAAS;IACvB,CAAC,CAAC;EACV,CAAC;AACL,CAAC;AAED,OAAO,MAAMoB,UAAU,GAAGA,CAAA,KAAM;EAC5B,OAAO,MAAM3B,QAAQ,IAAI;IACrB,MAAMO,SAAS,GAAGe,YAAY,CAACM,OAAO,CAAC,MAAM,CAAC,GAAGJ,IAAI,CAACK,KAAK,CAACP,YAAY,CAACM,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI;IAEhG,IAAGrB,SAAS,EAAC;MACTP,QAAQ,CAAC;QACLC,IAAI,EAAEL,aAAa,CAAC8B,WAAW;QAC/Bd,OAAO,EAAE;UAACL;QAAS;MACvB,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}