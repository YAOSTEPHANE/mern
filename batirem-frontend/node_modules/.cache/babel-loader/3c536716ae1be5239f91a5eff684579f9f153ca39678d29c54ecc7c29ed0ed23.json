{"ast":null,"code":"import { cartConstants } from './constants';\nimport store from '../store';\nimport axios from '../helpers/axios';\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n      if (res.status === 200) {\n        const {\n          cartItems\n        } = res.data;\n        console.log({\n          getCartItems: cartItems\n        });\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: {\n              cartItems\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cart: {\n        cartItems\n      },\n      auth\n    } = store.getState();\n    //console.log('action::products', products);\n    // const product = action.payload.product;\n    // const products = actions.payload.products;\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = {\n      ...product,\n      qty\n    };\n    if (auth.authenticate) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const payload = {\n        cartItems: [{\n          product: product._id,\n          quantity: qty\n        }]\n      };\n      console.log(payload);\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem('cart', JSON.stringify(cartItems));\n    }\n    console.log('addToCart::', cartItems);\n    dispatch({\n      type: cartConstants.ADD_TO_CART_SUCCESS,\n      payload: {\n        cartItems\n      }\n    });\n  };\n};\nexport const removeCartItem = payload => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.REMOVE_CART_ITEM_REQUEST\n      });\n      const res = await axios.post(`/user/cart/removeItem`, {\n        payload\n      });\n      if (res.status === 202) {\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_SUCCESS\n        });\n        dispatch(getCartItems());\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const updateCart = () => {\n  return async dispatch => {\n    const {\n      auth\n    } = store.getState();\n    let cartItems = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : null;\n    console.log('uppppppppp');\n    if (auth.authenticate) {\n      localStorage.removeItem('cart');\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              quantity: cartItems[key].qty,\n              product: cartItems[key]._id\n            };\n          })\n        };\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      }\n    } else {\n      if (cartItems) {\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: {\n            cartItems\n          }\n        });\n      }\n    }\n  };\n};\nexport { getCartItems };","map":{"version":3,"names":["cartConstants","store","axios","getCartItems","dispatch","type","ADD_TO_CART_REQUEST","res","post","status","cartItems","data","console","log","ADD_TO_CART_SUCCESS","payload","error","addToCart","product","newQty","cart","auth","getState","qty","_id","parseInt","authenticate","quantity","localStorage","setItem","JSON","stringify","removeCartItem","REMOVE_CART_ITEM_REQUEST","REMOVE_CART_ITEM_SUCCESS","REMOVE_CART_ITEM_FAILURE","updateCart","getItem","parse","removeItem","Object","keys","map","key","index","length"],"sources":["C:/Users/kouas/Desktop/mern-batirem/batirem-frontend/src/actions/cart.action.js"],"sourcesContent":["import { cartConstants } from './constants';\r\nimport store from '../store';\r\nimport axios from '../helpers/axios';\r\n\r\n\r\n\r\n\r\nconst getCartItems = () => {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\r\n            const res = await axios.post(`/user/getCartItems`);\r\n            if (res.status === 200) {\r\n                const { cartItems } = res.data;\r\n                console.log({ getCartItems: cartItems })\r\n                if (cartItems) {\r\n                    dispatch({\r\n                        type: cartConstants.ADD_TO_CART_SUCCESS,\r\n                        payload: { cartItems }\r\n                    });\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const addToCart = (product, newQty = 1) => {\r\n    return async dispatch => {\r\n        const { cart: {\r\n            cartItems\r\n        },\r\n            auth } = store.getState();\r\n        //console.log('action::products', products);\r\n        // const product = action.payload.product;\r\n        // const products = actions.payload.products;\r\n        const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\r\n        cartItems[product._id] = {\r\n            ...product,\r\n            qty\r\n        };\r\n        if (auth.authenticate) {\r\n            dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\r\n            const payload = {\r\n                cartItems: [{\r\n                    product: product._id,\r\n                    quantity: qty\r\n                }]\r\n            };\r\n            console.log(payload);\r\n            const res = await axios.post(`/user/cart/addtocart`, payload);\r\n            console.log(res);\r\n            if (res.status === 201) {\r\n                dispatch(getCartItems());\r\n            }\r\n        } else {\r\n            localStorage.setItem('cart', JSON.stringify(cartItems));\r\n        }\r\n\r\n        console.log('addToCart::', cartItems);\r\n\r\n        dispatch({\r\n            type: cartConstants.ADD_TO_CART_SUCCESS,\r\n            payload: { cartItems }\r\n        });\r\n    }\r\n}\r\n\r\nexport const removeCartItem = (payload) => {\r\n    return async (dispatch) => {\r\n      try {\r\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\r\n        const res = await axios.post(`/user/cart/removeItem`, { payload });\r\n        if (res.status === 202) {\r\n          dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\r\n          dispatch(getCartItems());\r\n        } else {\r\n          const { error } = res.data;\r\n          dispatch({\r\n            type: cartConstants.REMOVE_CART_ITEM_FAILURE,\r\n            payload: { error },\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n  };\r\nexport const updateCart = () => {\r\n    return async dispatch => {\r\n        const { auth } = store.getState();\r\n        let cartItems = localStorage.getItem('cart') ?\r\n            JSON.parse(localStorage.getItem('cart')) : null;\r\n\r\n        console.log('uppppppppp')\r\n\r\n        if (auth.authenticate) {\r\n            localStorage.removeItem('cart');\r\n            if (cartItems) {\r\n                const payload = {\r\n                    cartItems: Object.keys(cartItems).map((key, index) => {\r\n                        return {\r\n                            quantity: cartItems[key].qty,\r\n                            product: cartItems[key]._id\r\n                        }\r\n                    })\r\n                };\r\n                if (Object.keys(cartItems).length > 0) {\r\n                    const res = await axios.post(`/user/cart/addtocart`, payload);\r\n                    if (res.status === 201) {\r\n                        dispatch(getCartItems());\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (cartItems) {\r\n                dispatch({\r\n                    type: cartConstants.ADD_TO_CART_SUCCESS,\r\n                    payload: { cartItems }\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\nexport {\r\n    getCartItems\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}